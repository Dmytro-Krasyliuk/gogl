import express from "express";
import cors from "cors";
import axios from "axios";
import cron from "node-cron";
import http from "http";
import { Server as socketIO } from "socket.io";
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";
import { dirname } from "path";
import fetch from "node-fetch";
import { json } from "express";
import TelegramApi from "node-telegram-bot-api";
import * as htmlToImage from "html-to-image";
import nodeHtmlToImage from "node-html-to-image";
import mongoose, { Schema } from "mongoose";
import { v4 as uuid } from "uuid";
import { JSDOM } from "jsdom";
import ffmpeg from "fluent-ffmpeg";
import escapeHTML from "escape-html";
import dotenv from "dotenv";
import request from "request";
import MP4Box from 'mp4box'

import { themes, students, templates, elementsData, apps } from "./data.js";
import { result } from "./rss/quiz.js";
import time from "./other/time.js";
import { drawResult } from "./draw/quiz.js";
import { drawPracticeTask } from "./draw/practice.js";
import { drawSolo } from "./draw/solo-lesson.js";
import { testsImage } from "./tests-image.js";
import { generatePracticeTaskHTML } from "./practiceTasksHTML.js";
import getCodeColor from "./getCodeColor.js";
import generatePracticeTask from "./generatePracticeTask.js";
import { Practice, User, studentListPractice } from "./database/index.js";
import { Keyboards } from "./keyboards.js";
import { englishWords } from "./english.js";
import {drawEnglish} from './draw/english.js'


dotenv.config();


let asdfdf = [
  { day: "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", time: "21:30" },
  { day: "–°–µ—Ä–µ–¥–∞", time: "22:15" },
];




let typeThemes = "practice";
let adminkaGroupId = -889347051;
let waitCardNumber = false;
const keyboards = new Keyboards();
let history = [];
let newGroupStudent = [];
let testsID = [];
let practiceList = [];
let idMsgThemes = 0;
let currentThemes = themes;
let formSoloImg = {
  idGroup: "",
  name: "",
  date: "",
  teacher: "–ö—Ä–∞—Å–∏–ª—é–∫ –î–º–∏—Ç—Ä–æ",
  themes: [],
  technologies: [],
  grade: "",
  photos: [],
};
let newUserStatus;
let newUser = {
  name: "",
  family: "",
  age: "",
  group: "",
  price: "",
  date: {
    day: "",
    month: "",
    year: "",
  },
  contact: "",
  days: [],
};
let oldMessage = "";
let lastMsgId = 0;
let idCalendar = 0;
let idMsgTechnologies;
let activeGroupStudent = "";
const myId = 957139896;
const templateGroupId = -1001908490825;
const groupId = String(templateGroupId).slice(4);
let cc = "";

// const token = process.env.TOKEN;
const token = "6183220599:AAGzgg3MrVrxu2lu92WoBRRpLWanGa2UmWU";
let botId = "6183220599";
let rssDay = 0;
let userDay = {
  day: "",
  time: "",
};


const app = express();
const server = http.createServer(app);
const io = new socketIO(server);

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const port = process.env.PORT || 3008;

app.set("view engine", "ejs");
app.use(express.static(__dirname + "/public"));
app.use(json());
app.use(cors());
app.use(express.json());


async function addUserMoney(chatId, money) {
  let currentUser = await User.findOne({ idGroup: chatId });
  currentUser.diamonds += money;
  await currentUser.save();
  return currentUser.diamonds;
}



async function removeUserMoney(chatId, money) {
  let currentUser = await User.findOne({ idGroup: chatId });
  currentUser.diamonds -= money;
  await currentUser.save();
  return currentUser.diamonds;
}


function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

function generateQuestion() {
  const correctWord = getRandomElement(englishWords);
  let options = englishWords.filter((word) => word !== correctWord);
  options = options.sort(() => 0.5 - Math.random()).slice(0, 3);

  options.push(correctWord);
  options = options.sort(() => 0.5 - Math.random());

  return {
    correctWord,
    options,
  };
}







function getNamesOneStudentByIdGroup(id) {
  let names = "";
  students.forEach((student) => {
    if (student.idGroup == id) {
      names = student.name + " " + student.lastName;
    }
  });
  return names;
}

function viewCal(year, month, chat_id, cbq_id = null, message_id = null) {
  // –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
  let dayLines = getDays(year, month);
  // –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É
  let currentMonthDate = new Date(+year, +month);
  // –¥–∞—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  let prevMonthDate = new Date(
    new Date(currentMonthDate).setMonth(currentMonthDate.getMonth() - 1)
  );
  // –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  let nextMonthDate = new Date(
    new Date(currentMonthDate).setMonth(currentMonthDate.getMonth() + 1)
  );
  // –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
  let current_info =
    setBeforeZero(currentMonthDate.getMonth() + 1) +
    "." +
    currentMonthDate.getFullYear();
  // –æ–ø—Ä–µ–¥–µ–ª–∏–º –∫–Ω–æ–ø–∫–∏
  let buttons = [];
  // –ø–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ —ç—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  buttons.push([
    {
      text: "<<<",
      callback_data:
        "cal_" + prevMonthDate.getFullYear() + "_" + prevMonthDate.getMonth(),
    },
    {
      text: current_info,
      callback_data: "info_" + current_info,
    },
    {
      text: ">>>",
      callback_data:
        "cal_" + nextMonthDate.getFullYear() + "_" + nextMonthDate.getMonth(),
    },
  ]);

  buttons.push([
    {
      text: "–ü–ù",
      callback_data:
        "cal_" + prevMonthDate.getFullYear() + "_" + prevMonthDate.getMonth(),
    },
    {
      text: "–í–¢",
      callback_data:
        "cal_" + prevMonthDate.getFullYear() + "_" + prevMonthDate.getMonth(),
    },
    {
      text: "–°–†",
      callback_data:
        "cal_" + prevMonthDate.getFullYear() + "_" + prevMonthDate.getMonth(),
    },
    {
      text: "–ß–¢",
      callback_data:
        "cal_" + prevMonthDate.getFullYear() + "_" + prevMonthDate.getMonth(),
    },
    {
      text: "–ü–¢",
      callback_data:
        "cal_" + prevMonthDate.getFullYear() + "_" + prevMonthDate.getMonth(),
    },
    {
      text: "–°–ë",
      callback_data:
        "cal_" + prevMonthDate.getFullYear() + "_" + prevMonthDate.getMonth(),
    },
    {
      text: "–ù–î",
      callback_data:
        "cal_" + prevMonthDate.getFullYear() + "_" + prevMonthDate.getMonth(),
    },
  ]);

  // –ø–µ—Ä–µ–±–µ—Ä–µ–º –¥–Ω–∏
  dayLines.forEach(function (line) {
    // –¥–æ–±–∞–≤–∏–º —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
    buttons[buttons.length] = [];
    // –ø–µ—Ä–µ–±–µ—Ä–µ–º –ª–∏–Ω–∏—é –¥–Ω–µ–π
    line.forEach(function (day) {
      // –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É
      buttons[buttons.length - 1].push({
        text:
          month == new Date().getMonth() && day == new Date().getDate()
            ? "üü¢"
            : day,
        callback_data:
          day > 0
            ? "info_" + setBeforeZero(day) + "." + current_info
            : "inline",
      });
    });
  });

  // –≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
  let data = {
    chat_id: chat_id,
    text:
      `<b>–ö–∞–ª–µ–Ω–¥–∞—Ä:</b> ` +
      currentMonthDate.toLocaleString("uk-UA", {
        month: "long",
        year: "numeric",
      }) +
      `\n
–£–º–æ–≤–Ω—ñ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è:
üü¢ - –°—å–æ–≥–æ–¥–Ω—ñ  \n
      
      `,
    parse_mode: "html",
    reply_markup: { inline_keyboard: buttons },
  };
  // –ø—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å: –∫–∞–∫ –Ω–æ–≤–æ–µ –∏–ª–∏ –∑–∞–º–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
  if (message_id !== null) {
    // –≥–∞—Å–∏–º –∑–∞–ø—Ä–æ—Å
    notice(cbq_id);
    // –¥–æ–±–∞–≤–∏–º message_id
    data.message_id = message_id;
    // –Ω–∞–ø—Ä–∞–≤–∏–º –≤ –¢–µ–ª–µ–≥—Ä–∞–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    query("editMessageText", data);
  } else {
    // –Ω–∞–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    query("sendMessage", data);
  }
}
async function query(method, fields) {
  let ca = request({
    url: "https://api.telegram.org/bot" + token + "/" + method,
    method: "post",
    headers: { "content-type": "application/json" },
    json: fields,
  });
}

function getDays(year, month) {
  // –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É
  let d = new Date(year, month);
  // –æ–±—ä—è–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤
  let days = [];
  // –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
  days[days.length] = [];
  // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  for (let i = 0; i < getNumDayOfWeek(d); i++) {
    days[days.length - 1].push("-");
  }
  // –≤—ã—Ö–æ–¥–∏–º –ø–æ–∫–∞ –º–µ—Å—è—Ü –Ω–µ –ø–µ—Ä–µ—à–µ–ª –Ω–∞ –¥—Ä—É–≥–æ–π
  while (d.getMonth() === +month) {
    // –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–Ω–∏
    days[days.length - 1].push(d.getDate());
    // –≤—Å, –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å - –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
    if (getNumDayOfWeek(d) % 7 === 6) {
      // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
      days[days.length] = [];
    }
    // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    d.setDate(d.getDate() + 1);
  }
  // –¥–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  if (getNumDayOfWeek(d) !== 0) {
    for (let i = getNumDayOfWeek(d); i < 7; i++) {
      days[days.length - 1].push("-");
    }
  }
  // –≤–µ—Ä–Ω–µ–º –º–∞—Å—Å–∏–≤
  return days;
}

function getNumDayOfWeek(date) {
  // –ø–æ–ª—É—á–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
  let day = date.getDay();
  // –≤–µ—Ä–Ω–µ–º –Ω–∞ 1 –º–µ–Ω—å—à–µ [0 - –≤—Å–∫]
  return day === 0 ? 6 : day - 1;
}

function notice(cbq_id, text = null) {
  // –æ–ø—Ä–µ–¥–µ–ª–∏–º –¥–∞–Ω–Ω—ã–µ
  let data = {
    callback_query_id: cbq_id,
    alert: false,
  };
  // –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç —Ç–æ –¥–æ–±–∞–≤–∏–º
  if (text !== null) {
    data.text = text;
  }
  // –æ—Ç–ø—Ä–∞–≤–∏–º –≤ –¢–µ–ª–µ–≥—Ä–∞–º
  query("answerCallbackQuery", data);
}

function setBeforeZero(num) {
  return ("0" + num).slice(-2);
}

function getNamesStudentByIdGroup(id) {
  let newGroupNames = [];
  newGroupStudent.forEach((id) => {
    students.forEach((student) => {
      if (student.idGroup == id) {
        newGroupNames.push(student.name + " " + student.lastName);
      }
    });
  });
  return newGroupNames;
}

async function imageToBase64(imagePath) {
  try {
    const imageBuffer = fs.readFileSync(imagePath);

    const base64String = imageBuffer.toString("base64");

    return base64String;
  } catch (error) {
    console.error("Error converting image to base64:", error);
    return null;
  }
}
function shuffle(array) {
  let currentIndex = array.length,
    randomIndex;

  // While there remain elements to shuffle.
  while (currentIndex != 0) {
    // Pick a remaining element.
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;

    // And swap it with the current element.
    [array[currentIndex], array[randomIndex]] = [
      array[randomIndex],
      array[currentIndex],
    ];
  }

  return array;
}

function addNewUser(newUser) {
  return {
    name: newUser.name,
    lastName: newUser.family,
    days: newUser.days,
    pay: {
      day: newUser.day,
      month: newUser.month,
      year: newUser.year,
      sum: newUser.price,
      isPay: false,
    },
    events: [],
    quiz: {
      allMoney: 0,
      currentMoney: 0,
      lastResultMoney: 0,
    },
    diamonds: 0,
    contact: [],
    english: [],

    idGroup: newUser.group,
  };
}

async function sendFirstInfo(chatId, name, schedule) {
  let messageToPin = await bot.sendPhoto(chatId, "./img/other/start-it.jpg", {
    caption: `
<i>–ü—Ä–∏–≤—ñ—Ç, ${name}!</i>

<b>ü•≥ –ú–∏ –ø–æ—á–∏–Ω–∞—î–º–æ –Ω–∞—à—ñ –∑–∞–Ω—è—Ç—Ç—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—é!</b>

–û—Å—å —É—Å—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, —è–∫–∞ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –Ω–∞—à–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è:

<b>üîê –ü–æ—Å—Ç—ñ–π–Ω—ñ –¥–æ—Å—Ç—É–ø–∏ –¥–æ –∑–∞–Ω—è—Ç—å:</b>

üîé https://us04web.zoom.us/j/3533531158?pwd=nTl2kiicwvOgLNOHbaDaGMi8JQ1Ttj.1

üîë <b>ID:</b> 353 353 1158
üîë <b>–ö–æ–¥ –¥–æ—Å—Ç—É–ø—É:</b> start
  `,
    parse_mode: "HTML",
  });
  await bot.pinChatMessage(chatId, messageToPin.message_id);

  let scheduleText = ``;

  schedule.forEach((item) => {
    scheduleText += `
üìå ${item.day}: ${item.time}
`;
  });
  await bot.sendMessage(
    chatId,
    `
<b>–†–æ–∑–∫–ª–∞–¥ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –∑–∞–Ω—è—Ç—å:</b>
<b>${scheduleText}</b>
‚ö†Ô∏è –ß–∞—Å –≤–∫–∞–∑–∞–Ω–∏–π –∑–∞ –ö–∏—î–≤–æ–º.
‚ö†Ô∏è –î–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è –Ω—ñ—á–æ–≥–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ. –î–æ—Å—Ç–∞—Ç–Ω—å–æ –ª–∏—à–µ –ø—Ä–æ–≥—Ä–∞–º–∏ Zoom –¥–ª—è —Ç–æ–≥–æ —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –Ω–∞ –∑–∞–Ω—è—Ç—Ç—è.


  `,
    {
      parse_mode: "HTML",
    }
  );

  await bot.sendMessage(
    chatId,
    `
<b>üìÜ –†–æ–∑–∫–ª–∞–¥ —ñ–Ω—à–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤:</b>

<b>üìå –ü–æ–Ω–µ–¥—ñ–ª–æ–∫: </b>
–û—Ç—Ä–∏–º—É—î—Ç–µ –∞–≤—Ç–æ—Ä—Å—å–∫–∏–π –≤—ñ–¥–µ–æ-–º–∞—Ç–µ—Ä—ñ–∞–ª.

<b>üìå –í—ñ–≤—Ç–æ—Ä–æ–∫:</b>
–û—Ç—Ä–∏–º—É—î—Ç–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∑–∞—Å–≤–æ—î–Ω–Ω—è –≤—ñ–¥–µ–æ-–º–∞—Ç–µ—Ä—ñ–∞–ª—É.

<b>üìå –ß–µ—Ç–≤–µ—Ä: </b>
<u>20:00</u> - –ó–º–∞–≥–∞–Ω–Ω—è –ø–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—é.

<b>üìå –°—É–±–æ—Ç–∞: </b>
<u>20:00</u> - –ó–∞–Ω—è—Ç—Ç—è —É –≥—Ä—É–ø—ñ. <i>–õ–µ–≥–∫–∏–π —Ä—ñ–≤–µ–Ω—å.</i>

<b>üìå –ù–µ–¥—ñ–ª—è: </b>
<u>20:00</u> - –ó–∞–Ω—è—Ç—Ç—è —É –≥—Ä—É–ø—ñ. <i>–í–∞–∂–∫–∏–π —Ä—ñ–≤–µ–Ω—å.</i>

  `,
    {
      parse_mode: "HTML",
    }
  );
}



app.get("/tests", async (req, res) => {
  const token = "6183220599:AAGzgg3MrVrxu2lu92WoBRRpLWanGa2UmWU";
  const myId = 957139896;

  let result = {
    idTask: 1,
    idStudent: 957139896,
    link: "https://cdpn.io/cpe/boomboom/index.html?key=index.html-926c7914-f3e8-a91b-5f31-f26f474c5703",
    successTask: [1, 0, 0, 0],
    code: {
      html: "%0A%20%20%20%20%0A%3Cdiv%20class%3D%22block%22%3E%20%3Cdiv%3E%0A%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%0A%20%20%0A%3Cscript%20src%3D%22https%3A%2F%2Fcpwebassets.codepen.io%2Fassets%2Fcommon%2FstopExecutionOnTimeout-2c7831bb44f98c1391d6a4ffda0e1fd302503391ca806e7fcc7b9b87197aec26.js%22%3E%3C%2Fscript%3E%0A%20%20%3Cscript%20src%3D%22https%3A%2F%2Fcdpn.io%2Fcpe%2Fboomboom%2Fpen.js%3Fkey%3Dpen.js-926c7914-f3e8-a91b-5f31-f26f474c5703%22%20crossorigin%3D%22%22%3E%3C%2Fscript%3E%0A%0A%0A%3C%2Fdiv%3E",
      css:
        "\n" +
        "    .block {\n" +
        "  width: 100px;\n" +
        "  height: 300px;\n" +
        "  background: red;\n" +
        "}\n" +
        "        \n" +
        "  ",
      js: "",
    },
  };

  let task = await Practice.findOne({ id: result.idTask });
  let successTask = "";
  let wrongTask = "";

  result.successTask.forEach((status, i) => {
    if (status == 1) {
      successTask += `‚úÖ ${task.tasks[i].title}
`;
    } else {
      wrongTask += `‚ùå ${task.tasks[i].title}
`;
    }
  });

  let templateText =
    `
*–£—á–µ–Ω—å –∑–∞–≤–µ—Ä—à–∏–≤ –ø—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è!*

–£—á–µ–Ω—å: ${getNamesOneStudentByIdGroup(result.idStudent)}

–ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ${result.idTask}: 
*${task.name}*

–í–∏–∫–æ–Ω–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è:
${successTask}
–ù–µ –≤–∏–∫–æ–Ω–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è:
${wrongTask}

[–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–±–æ—Ç—É:](${result.link})

–ö–æ–¥:
*HTML*:
` +
    "`" +
    decodeURIComponent(result.code.html) +
    "`" +
    `

*CSS*:

` +
    "`" +
    decodeURIComponent(result.code.css) +
    "`" +
    `

*JS*
` +
    "`" +
    decodeURIComponent(result.code.js) +
    "`" +
    `
  
  `;

  templateText = templateText.replace(/\n/g, "%0A");

  let sendURL = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${myId}&text=${templateText}&parse_mode=Markdown`;
  fetch(sendURL);


  res.send("ok");
});
app.get("/sandbox/select/:data", function (req, res) {
  let data = req.params.data;
});


app.get("/getTasks/:idStudent/:idTask", async (req, res) => {
  let idStudent = req.params.idStudent;
  let idTask = req.params.idTask;
  let task = "not defined";
  task = await Practice.findOne({ id: idTask });
  return res.send({ data: task });
});

app.get("/sandbox-elements/:idTask", async (req, res) => {
  let idTask = req.params.idTask;
  let task = "not defined";
  task = await Practice.findOne({ id: idTask });
  return res.send({ data: task });
});



app.get("/", async (req, res) => {
  res.render("practice", {});
});



app.get("/get/practice/:idTask/:idStudent", async (req, res) => {
  let idTask = req.params.idTask;
  let idStudent = req.params.idStudent;
  let nameStudent = getNamesOneStudentByIdGroup(idStudent);
  let task = await Practice.findOne({ id: idTask });

  let studentPractice = await studentListPractice.findOne({
    idPractice: idTask,
  });

  if (studentPractice) {
    let allStudentsData = [];

    if (studentPractice) {
      studentPractice.students.forEach((student) => {
        let myProfile = "";
        if (student.idStudent == idStudent) {
          myProfile = "your-car";
        }
        allStudentsData.push({
          studentName: getNamesOneStudentByIdGroup(student.idStudent),
          studentCar: "/img/car-1.png",
          studentId: student.idStudent,
          myProfile: myProfile,
          studentCurrentPosition: 3,
        });
      });
    }


    let HTML = task.codeResult.html;
    let CSS = task.codeResult.css;
    let JS = task.codeResult.js;
    let taskName = task.name;

    let data = {
      nameStudent: nameStudent,
      idStudent: idStudent,
      idTask: idTask,
      taskName: taskName,
      allStudentsData: allStudentsData,
      task: task,
      tasks: task.tasks,
      code: {
        HTML: HTML,
        CSS: CSS,
        JS: JS,
      },
    };

    res.render("practice", data);
  }
  res.render("practice", {});
});

app.get("/css/style.css", function (req, res) {
  res.sendFile(__dirname + "/public/css/style.css");
});

app.get("/js/practice/:idTask/:idStudent", async (req, res) => {
  let idTask = req.params.idTask;
  let idStudent = req.params.idStudent;
  let studentPractice = await studentListPractice.findOne({
    idPractice: idTask,
  });
  let imageResult = studentPractice.photo;
  let template = `
  
let idStudent = ${idStudent};
let idTask = ${idTask};
let imageResult = '${imageResult}'

initProject(idStudent, idTask, imageResult);
  `;
  res.setHeader("Content-Type", "application/javascript");
  res.send(template);
});

app.post("/set/practice", async (req, res) => {
  const data = req.body;
  const token = "6183220599:AAGzgg3MrVrxu2lu92WoBRRpLWanGa2UmWU";
  const myId = 957139896;
  let isFinish = false;

  let result = req.body;

  let task = await Practice.findOne({ id: result.idTask });
  let studentPractice = await studentListPractice.findOne({
    idPractice: result.idTask,
  });

  studentPractice.students.forEach(async (student, index) => {
    if (student.idStudent == result.idStudent) {

      isFinish = student.finish;
      if (isFinish == false) {
        const nestedArrayPath = `students.${index}.historyCode`;
        const studentPath = `students.${index}.finish`;

        const newElement = {
          html: result.code.html,
          css: result.code.css,
          js: result.code.js,
        };
        let a = await studentListPractice.updateOne(
          { idPractice: result.idTask },
          { $push: { [nestedArrayPath]: newElement } }
        );

        if (result.type == "sendInfo") {
          let aa = await studentListPractice.updateOne(
            { idPractice: result.idTask },
            { [studentPath]: true }
          );
        }

      }
    }
  });

  if (isFinish == false) {
    let successTask = "";
    let wrongTask = "";

    result.successTask.forEach((status, i) => {
      if (status == 1) {
        successTask += `‚úÖ ${task.tasks[i].title} ${task.tasks[i].label}
`;
      } else {
        wrongTask += `‚ùå ${task.tasks[i].title} ${task.tasks[i].label}
`;
      }
    });

    let templateText;

    if (result.type == "updateInfo") {
      templateText =
        `
*–û–ù–û–í–õ–ï–ù–ù–Ø –î–ê–ù–ù–ò–•*

–£—á–µ–Ω—å: ${getNamesOneStudentByIdGroup(result.idStudent)}

–ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ${result.idTask}: 
*${task.name}*

–í–∏–∫–æ–Ω–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è:
${successTask}
–ù–µ –≤–∏–∫–æ–Ω–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è:
${wrongTask}

[–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–±–æ—Ç—É:](${result.link})

–ö–æ–¥:
*HTML*:
` +
        "`" +
        decodeURIComponent(result.code.html) +
        "`" +
        `

*CSS*:

` +
        "`" +
        decodeURIComponent(result.code.css) +
        "`" +
        `

*JS*
` +
        "`" +
        decodeURIComponent(result.code.js) +
        "`" +
        `
  
  `;

      templateText = templateText.replace(/\n/g, "%0A");
    }

    if (result.type == "sendInfo") {
      templateText =
        `
*–£—á–µ–Ω—å –∑–∞–≤–µ—Ä—à–∏–≤ –ø—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è!*

–£—á–µ–Ω—å: ${getNamesOneStudentByIdGroup(result.idStudent)}

–ó–∞–≤–¥–∞–Ω–Ω—è ‚Ññ${result.idTask}: 
*${task.name}*

–í–∏–∫–æ–Ω–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è:
${successTask} 
–ù–µ –≤–∏–∫–æ–Ω–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è:
${wrongTask}

[–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–±–æ—Ç—É:](${result.link})

–ö–æ–¥:
*HTML*:
` +
        "`" +
        decodeURIComponent(result.code.html) +
        "`" +
        `

*CSS*:

` +
        "`" +
        decodeURIComponent(result.code.css) +
        "`" +
        `

*JS*
` +
        "`" +
        decodeURIComponent(result.code.js) +
        "`" +
        `
  
  `;

      templateText = templateText.replace(/\n/g, "%0A");
    }

    let sendURL = `https://api.telegram.org/bot${token}/sendMessage?chat_id=${myId}&text=${templateText}&parse_mode=Markdown`;
    fetch(sendURL);


    res.send("ok");
  } else {
    res.send("error");
  }
  // res.send(`Hello, POST request received! Data: ${JSON.stringify(data)}`);
});


// io.on("connection", (socket) => {
//   console.log("New client connected");

//   // socket.on("codeChange", (data) => {
//   //   console.log("Code change event received from client");
//   //   socket.broadcast.emit("codeChange", data);
//   // });

//   // socket.on("clear-hightlight", (data) => {
//   //   console.log("clear-hightlight");
//   //   socket.broadcast.emit("clear-hightlight", data);
//   // });

//   // socket.on("change-mouse", (data) => {
//   //   socket.broadcast.emit("change-mouse", data);
//   // });

//   // socket.on("click", (data) => {
//   //   console.log("click");
//   //   socket.broadcast.emit("click", data);
//   // });

//   // socket.on("highlightText", (data) => {
//   //   console.log("Highlight text event received from client");
//   //   socket.broadcast.emit("highlightText", data);
//   // });

//   // socket.on("block-code", () => {
//   //   console.log("block-code");
//   //   socket.broadcast.emit("block-code");
//   // });

//   // socket.on("unblock-code", () => {
//   //   console.log("unblock-code");
//   //   socket.broadcast.emit("unblock-code");
//   // });

//   socket.on("car-position", (data) => {
//     console.log("car-position");
//     socket.broadcast.emit("car-position", data);
//   });

//   socket.on("disconnect", () => {
//     console.log("Client disconnected");
//   });
// });

const bot = new TelegramApi(token, { polling: true });

bot.setMyCommands([
  { command: "/start", description: "start" },
  { command: "/admin", description: "admin" },
  { command: "/keyboard", description: "keyboard" },
  { command: "/themes", description: "themes" },
  { command: "/elements", description: "elements" },
  { command: "/results", description: "–ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏" },
  { command: "/help", description: "ok" },
]);

await Practice.deleteMany({});
await studentListPractice.deleteMany({});

let idPracticeTask = [125, 126];




// User.updateMany({}, { $set: { english: [] } })
//   .then(result => {
//     console.log('Field "english" added to all users:', result);
//   })
//   .catch(err => {
//     console.error('Error:', err);
//   });




await Practice.insertMany([
  generatePracticeTask({
    id: "html_a_1",
    name: "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç–∏",
    description: "–ö–∏—î–≤–∞, –û–¥–µ—Å–∏ —Ç–∞ –ß–µ—Ä–Ω—ñ–≤—Ü—ñ–≤",
    type: "classElement",
    level: 1,
    codeResult: {
      html: `<p>–ü–µ—Ä–µ–≥–ª—è–Ω—å –∫–∞—Ä—Ç—É 
<a href="https://goo.gl/maps/1x8yTmk9G46BdaFd8">–ö–∏—î–≤–∞</a>
<a href="https://goo.gl/maps/EcbEr2itoNRYhbTt9">–û–¥–µ—Å–∏</a>
<a href="https://goo.gl/maps/iKdjqLVqR9fuisPC9">–ß–µ—Ä–Ω—ñ–≤—Ü—ñ–≤</a>
  
</p>`,
      css: ``,
      js: `
    `,
    },
    data: {
      html: ``,
      css: ``,
      js: ``,
    },
  }),
  generatePracticeTask({
    id: "set_s1_1",
    name: "–ë–∞–∑–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏",
    description: "–ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∏, —Ç–µ–∫—Å—Ç–∏, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
    type: "classElement",
    level: 1,
    codeResult: {
      html: `<div>
      <img src="" alt="">
      <h1>Hello</h1>
      <h6>Hello</h6>
      </div>
      `,
      css: ``,
      js: `
    `,
    },
    data: {
      html: ``,
      css: ``,
      js: ``,
    },
  }),
  generatePracticeTask({
    id: "set_s5_1",
    name: "–ë–∞–∑–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏",
    description: "–ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∏, —Ç–µ–∫—Å—Ç–∏, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
    type: "classElement",
    level: 1,
    codeResult: {
      html: `<div>
      <h1>Hello</h1>
      <h6>Hello</h6>
      <img src="https://hips.hearstapps.com/hmg-prod/images/close-up-of-tulips-blooming-in-field-royalty-free-image-1584131603.jpg" alt="">
      <button class="delete">delete item</button>
      <h5 class="text5">Hello</h5>
      <a href="https://facebook.com" class="facebook">link to Facebook</a>
      <h4>Hello</h4>
      <a href="https://youtube.com" class="youtube">link to YouTube</a>
      <h2>Hello</h2>
      <h1 class="bigText">Hello</h1>
      <h1 class="bigText">Hello</h1>
      <a href="https://instagram.com" class="instagram">link to instagram</a>
      <div class="rect">i am rectangle</div>
      <img class="image" src="https://www.adorama.com/alc/wp-content/uploads/2017/11/shutterstock_114802408.jpg" alt="">
      <h5 class="text5">Hello</h5>
      <img class="image" src="https://img.freepik.com/free-vector/vector-isolated-realistic-soccer-ball-white_1284-41932.jpg?w=2000" alt="">
      <a href="https://youtube.com" class="youtube">link to YouTube</a>
      <button class="delete">delete item</button>
      <div class="rect2">i am rectangle 2</div>
      <h2>Hello</h2>
      <a href="https://apple.com" class="apple">link to Apple</a>
      <h1 class="bigText">Hello</h1>
      <button class="delete">delete item</button>
      </div>
      `,
      css: `
      .image {
        width: 100px;
      }
      .delete{
        background: red;
        width: 200px;
      }
      .bigText {
        background: yellow;
      }
      `,
      js: `
    `,
    },
    data: {
      html: ``,
      css: ``,
      js: ``,
    },
  }),
  generatePracticeTask({
    id: "set_base_mega",
    name: "–ë–∞–∑–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏",
    description: "–ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∏, —Ç–µ–∫—Å—Ç–∏, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
    type: "classElement",
    level: 1,
    codeResult: {
      html: `<div>
      <img src="" alt="">
      <h1>Hello</h1>
      <div></div>
      <h6>Hello 2</h6>
      <h2>Disney</h2>
      <div></div>
      <img src="" alt="">
      <h6>Hello 2</h6>
      <div></div>
      <h6>Hello 2</h6>
      <img src="" alt="">
      <div></div>
      <img src="" alt="">
      <div></div>
      <h1>History</h1>
      <h6>Hello 2</h6>
      <img src="" alt="">
      <div></div>
      <i></i>
      <b></b>
      <u></u>
      <u>end</u>
      </div>
      `,
      css: ``,
      js: `
    `,
    },
    data: {
      html: ``,
      css: ``,
      js: ``,
    },
  }),
  generatePracticeTask({
    id: "set_css2_1",
    name: "–¢—Ä–µ–Ω—É—î–º–æ CSS #1",
    description: "–∫–æ–ª—ñ—Ä –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç—É",
    type: "classElement",
    level: 1,
    codeResult: {
      html: `<h1>Hello</h1>
      `,
      css: `h1 {
        color: red;
      }`,
      js: `
    `,
    },
    data: {
      html: ``,
      css: ``,
      js: ``,
    },
  }),
  generatePracticeTask({
    id: "set_css3_1",
    name: "–¢—Ä–µ–Ω—É—î–º–æ CSS #2",
    description: "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞",
    type: "classElement",
    level: 1,
    codeResult: {
      html: `<div></div>
      `,
      css: `div {
        width: 200px;
        height: 100px;
        background: red;
      }`,
      js: `
    `,
    },
    data: {
      html: ``,
      css: ``,
      js: ``,
    },
  }),
  generatePracticeTask({
    id: "css_display_flex_1",
    name: "4 –ï–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ä—è–¥",
    description: "display: flex & gap",
    type: "classElement",
    level: 1,
    codeResult: {
      html: `<div class="app">
  <div class="item">1</div>
  <div class="item">2</div>
  <div class="item">3</div>
  <div class="item">4</div>
</div>`,
      css: `.app {
  width: 260px;
  display: flex;
  gap: 10px;
  background: #0CE508;
  padding: 20px;
}
.item {
  background: orange;
  color: white;
  padding: 20px;
  border-radius: 4px;
  font-size: 30px;
}`,
      js: `
    `,
    },
    data: {
      html: ``,
      css: ``,
      js: ``,
    },
  }),

  generatePracticeTask({
    id: "html_a_2",
    name: "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ facebook",
    description: "–∑ —Ä—ñ–∑–Ω–∏–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏",
    type: "classElement",
    level: 1,
    codeResult: {
      html: `<div class="app">
  <a href="https://www.facebook.com/" target="_blank" class="facebook" title="–ü–æ–ø—É–ª—è—Ä–Ω–∞ —Å–æ—Ü. –º–µ—Ä–µ–∂–∞" id="fb">link to Facebook</a>
</div>`,
      css: ``,
      js: `
    `,
    },
    data: {
      html: ``,
      css: ``,
      js: ``,
    },
  }),

  generatePracticeTask({
    id: "html_abbr_1",
    name: "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç–∏",
    description: "–ö–∏—î–≤–∞, –û–¥–µ—Å–∏ —Ç–∞ –ß–µ—Ä–Ω—ñ–≤—Ü—ñ–≤",
    type: "classElement",
    level: 1,
    codeResult: {
      html: `<p>–ü–µ—Ä–µ–≥–ª—è–Ω—å –∫–∞—Ä—Ç—É 
<a href="https://goo.gl/maps/1x8yTmk9G46BdaFd8">–ö–∏—î–≤–∞</a>
<a href="https://goo.gl/maps/EcbEr2itoNRYhbTt9">–û–¥–µ—Å–∏</a>
<a href="https://goo.gl/maps/iKdjqLVqR9fuisPC9">–ß–µ—Ä–Ω—ñ–≤—Ü—ñ–≤</a>
  
</p>`,
      css: ``,
      js: `
    `,
    },
    data: {
      html: ``,
      css: ``,
      js: ``,
    },
  }),
]);








// // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
// bot.onText(/\/start/, (msg) => {
//   const chatId = msg.chat.id;
//   bot.sendMessage(
//     chatId,
//     "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞: [Alert](https://t.me/DimaNice_Bot?start=alert)",
//     {
//       parse_mode: "Markdown",
//     }
//   );
// });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /alert
bot.onText(/\/alert/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, "‚ö†Ô∏è –≠—Ç–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! ‚ö†Ô∏è");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ deep linking
bot.onText(/\/start alert/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    "‚ö†Ô∏è –≠—Ç–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ deep linking! ‚ö†Ô∏è"
  );
});

bot.onText(/\/start (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const param = match[1];

  // https:t.me/DimaNice_Bot?start=SOME_PARAM
  if (param === "SOME_PARAM") {
    bot.sendMessage(
      chatId,
      "–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º SOME_PARAM"
    );
  }
});

bot.on("message", async (msg) => {
  const text = msg.text;
  const chatId = msg.chat.id;
  lastMsgId = msg.message_id;


  if (waitCardNumber) {
    let currentUser = await User.findOne({ idGroup: chatId });

    let curMoney = currentUser.quiz.currentMoney;

    bot.sendMessage(
      adminkaGroupId,
      `
<b>–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤:</b>

<b>–£—á–µ–Ω—å:</b> ${getNamesOneStudentByIdGroup(chatId)}
<b>–í—Å—å–æ–≥–æ –≥—Ä–æ—à–µ–π:</b> ${curMoney} –≥—Ä–Ω
<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:</b> ${text}

`,
      { parse_mode: "HTML" }
    );
    bot.sendMessage(
      chatId,
      `
<b>üí∏ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>

‚è≥ –Ø–∫ —Ç—ñ–ª—å–∫–∏ –î–º–∏—Ç—Ä–æ –∑–≤—ñ–ª—å–Ω–∏—Ç—å—Å—è, –≤—ñ–¥–ø—Ä–∞–≤–µ –≤–∞–º –∫–æ—à—Ç–∏
          `,
      { parse_mode: "HTML" }
    );
    waitCardNumber = false;
  } else {
    if (newUserStatus) {
      if (newUserStatus == "name") {
        newUser.name = text;
        bot.sendMessage(chatId, "–í–∫–∞–∂—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ —É—á–Ω—è");
        newUserStatus = "family";
      } else if (newUserStatus == "family") {
        newUser.family = text;
        bot.sendMessage(chatId, "–í–∫–∞–∂—ñ—Ç—å –≤—ñ–∫ —É—á–Ω—è");
        newUserStatus = "age";
      } else if (newUserStatus == "age") {
        newUser.age = text;
        bot.sendMessage(
          chatId,
          "–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –∑–∞–Ω—è—Ç—è",
          keyboards.keyboardDaysWeek
        );
        newUserStatus = "schedule";
      } else if (newUserStatus == "price") {
        // if () { 112

        // }
        newUser.group = text;
        bot.sendMessage(chatId, "–í–∫–∞–∂—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è –∑–∞ –º—ñ—Å—è—Ü—å");
        newUserStatus = "idGroup";
      } else if (newUserStatus == "idGroup") {
        newUser.price = text;
        bot.sendMessage(chatId, "–í–∫–∞–∂—ñ—Ç—å ID –≥—Ä—É–ø–∏");
        newUserStatus = "date";
      } else if (newUserStatus == "date") {
        try {
          let c = await bot.getChatMember(text, botId);

          newUser.group = text;
          bot.sendMessage(chatId, "–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –∑–∞–Ω—è—Ç—å —Ç–∞ –æ–ø–ª–∞—Ç–∏");
          newUserStatus = "contact";
        } catch (e) {
          bot.sendMessage(
            chatId,
            "–í–∫–∞–∂—ñ—Ç—å –≤—ñ—Ä–Ω–∏–π ID –≥—Ä—É–ø–∏. –ú–æ–∂–ª–∏–≤–æ –ë–æ—Ç –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ü—ñ—î—ó –≥—Ä—É–ø–∏"
          );
          newUserStatus = "date";
        }
      } else if (newUserStatus == "contact") {
        newUser.contact = text;
        bot.sendMessage(chatId, "–í–∫–∞–∂—ñ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É –æ—Å–æ–±—É");
        newUserStatus = "success";
      } else if (newUserStatus == "success") {
        // console.log(newUser);
        try {
          await bot.setChatPhoto(newUser.group, "./img/other/ava-group.png");
        } catch (e) {}
        let link = await bot.getChat(Number(newUser.group));
        // console.log(link);
        // console.log(link.invite_link);
        // bot.sendMessage(chatId, link.invite_link);

        bot.sendPhoto(chatId, "./img/other/invite-group.png", {
          caption: `<b>ü•≥–í—ñ—Ç–∞—é! –í–∞—à–µ –Ω–∞–≤—á–∞–Ω–Ω—è –≤–∂–µ —Ä–æ–∑–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!</b>

<b>1 –∫—Ä–æ–∫:</b>
–ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –≥—Ä—É–ø–∏: 
${link.invite_link}

<b>–¶–µ –≤–∞—à–∞ –æ—Å–æ–±–∏—Å—Ç–∞, –æ—Å–Ω–æ–≤–Ω–∞ –≥—Ä—É–ø–∞, –¥–µ –±—É–¥–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ª–∏—à–µ –ø—Ä–æ –í–∞—à–µ –Ω–∞–≤—á–∞–Ω–Ω—è, –í–∞—à—ñ –¥–æ–º–∞—à–∫–∏, –í–∞—à—ñ –æ—Ü—ñ–Ω–∫–∏ —ñ —Ç.–¥.</b> 

<i>–¢–∞–∫–æ–∂ —Ü–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è, –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º, –≤–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —É—Å—ñ–º —Ö—Ç–æ –º–∞—î –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤—Å—ñ—Ö –ø–æ–¥—ñ–π —Å—Ç–æ—Å–æ–≤–Ω–æ –Ω–∞–≤—á–∞–Ω–Ω—è (–±–∞—Ç—å–∫–æ, –º–∞—Ç–∏, —Å–∏–Ω, –¥–æ–Ω—å–∫–∞ —ñ —Ç.–¥.)</i>`,
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [{ text: "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ –≥—Ä—É–ø–∏", url: link.invite_link }],
            ],
          },
        });

        User.insertMany(addNewUser(newUser))
          .then(function () {
            // console.log("–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ë–î");
          })

          .catch(function (err) {});

        bot.sendMessage(chatId, "–£—á–µ–Ω—å —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!");
        newUserStatus = undefined;
        // console.log(newUser.group);

        sendFirstInfo(newUser.group, newUser.name, newUser.days);
      }
    }

    if (text === "/elements") {
      bot.sendMessage(chatId, `elements`, {
        ...keyboards.elementsCategory,
        parse_mode: "HTML",
      });
    }

    // commands
    if (text === "/themes") {
      let titles = '';
        for (let i = 0; i < themes.length; i++) {
          titles += themes[i].title + '\n'
        }
      bot.sendMessage(chatId, titles);
      
    }



   
    // commands
    if (text === "/start") {
      bot.sendMessage(
        chatId,
        `
<b>ü•≥ –í—ñ—Ç–∞—é!</b>
–¢–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é.

<b>–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ:</b>
‚ñ™Ô∏è –í–∏–≤—á–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, 
‚ñ™Ô∏è –ó–∞—Ä–æ–±–∏—Ç–∏ –∞–ª–º–∞–∑–∏,
‚ñ™Ô∏è –ó–∞–∫—Ä—ñ–ø–∏—Ç–∏ —Ç–µ–º–∏. 
–ó–≥–µ–Ω–µ—Ä—É—é —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è.
‚ñ™Ô∏è –î—ñ–∑–Ω–∞—Ç–∏—Å—å —Ä–æ–∑–∫–ª–∞–¥ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–ø–ª–∞—Ç—É

–¢–∞–∫–æ–∂ –≤ –º–µ–Ω–µ —î –≤–±—É–¥–æ–≤–∞–Ω–∏–π üí¨ Chat GPT (—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç). 

<b>–û–±–µ—Ä–∏ —â–æ —Å–∞–º–µ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—åüëá </b>     
      `,
        {
          parse_mode: "HTML",
          ...keyboards.keyboardStudents,
        }
      );
      // bot.answer_callback_query(
      //   callback_query_id = cmd.id,
      //   text = "–ù–µ–≤–µ—Ä–Ω–æ, –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç...",
      //   show_alert = True
      // );
      //  bot.answerCallbackQuery(msg.id, {
      //    text: "–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 1",
      //  });
      //   const callbackQueryId = msg.id;
      //   const text = "–ù–µ–≤–µ—Ä–Ω–æ, –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç...";
      //   const showAlert = true;

      //   bot.answerCallbackQuery(callbackQueryId, { text, showAlert });
    }

    if (text === "/keyboard") {
      bot.sendMessage(chatId, "symbols", keyboards.keyboardSymbols);
    }

    // commands
    if (text === "/results") {
      let results = [];
      // console.log("newGroupStudent", newGroupStudent);
      newGroupStudent.forEach((studentId) => {
        let answerSum = {
          right: 0,
          error: 0,
          notData: 0,
        };
        testsID.forEach((testId) => {
          // console.log("testId", testId.answers);

          if (testId.answers.right.includes(Number(studentId))) {
            answerSum.right = answerSum.right + 1;
          }
          if (testId.answers.error.includes(Number(studentId))) {
            answerSum.error = answerSum.error + 1;
          }
          if (testId.answers.notData.includes(Number(studentId))) {
            answerSum.notData = answerSum.notData + 1;
          }
        });

        results.push({
          id: studentId,
          answerSum: answerSum,
        });
      });

      let sortListResults = results.sort((a, b) =>
        a.answerSum.right < b.answerSum.right ? 1 : -1
      );
      let text = `
–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤:

`;
      sortListResults.forEach((student, i) => {
        let percent =
          student.answerSum.right /
          (student.answerSum.error +
            student.answerSum.notData +
            student.answerSum.right);
        let grade =
          percent < 0.2
            ? 6
            : percent < 0.3
            ? 7
            : percent < 0.5
            ? 8
            : percent < 0.7
            ? 9
            : percent < 0.8
            ? 10
            : percent < 0.9
            ? 11
            : percent >= 0.9
            ? 12
            : undefined;
        text += `
<b>${i + 1}. ${getNamesOneStudentByIdGroup(student.id)}</b>
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: ${student.answerSum.right}
‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: ${student.answerSum.error}
üîò –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${student.answerSum.notData}
% –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: ${percent.toFixed(2) * 100}%
<b>–û—Ü—ñ–Ω–∫–∞: ${grade} –±–∞–ª—ñ–≤</b>
 
`;
      });


      bot.sendMessage(chatId, text, { parse_mode: "HTML" });
    }

    if (text === "/admin") {
      if (chatId == myId) {
        bot.sendMessage(chatId, "–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å. \n–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é", keyboards.adminMain);
      }
    }

    if (text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É–ø—É") {
      let newGroupNames = getNamesStudentByIdGroup(newGroupStudent);

      bot.sendMessage(
        chatId,
        "–ì—Ä—É–ø–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞. –£—Å—ñ —É—á–Ω—ñ –≤ –≥—Ä—É–ø—ñ: " + newGroupNames,
        keyboards.adminMain
      );
    }

    if (text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç–µ–º–∏") {
      bot.sendMessage(
        chatId,
        "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –∑–≤—ñ—Ç –∑–∞–Ω—è—Ç—Ç—è (–∫–æ–¥, —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏)",
        keyboards.photoKeyboard
      );
    }

    if (text === "tts") {
      for (let i = 0; i < students.length; i++) {
        await drawResult(
          students[i].name + " " + students[i].lastName,
          students[i].quiz.lastResultMoney
        );
        await bot.sendPhoto(chatId, "./img/image20.png");
      }
    }
    if (text == "—Ñ—Ñ") {
      cc = await bot.sendPoll(
        chatId,
        "Title quiz",
        JSON.stringify(["variant1", "variant2", "variant3"]),
        {
          is_anonymous: false,
          type: "quiz",
          correct_option_id: 0,
          explanation: "–î–∏–≤–∏—Å—å —Ö–≤–∏–ª–∏–Ω—É 38-40",
        }
      );
    }
    if (text == "a") {
      idMsgThemes = lastMsgId + 1;
      bot.sendMessage(
        chatId,
        "themes",
        keyboards.themesKeyboard2(currentThemes, formSoloImg.themes)
      );
    }
    if (text == "cc") {
      bot.sendMessage(chatId, "hello", keyboards.showQuiz());
    }
    if (text == 'money') {
      let money = await addUserMoney(chatId, 10);
    }
    if (text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–∞—Ç—É") {
      bot.sendMessage(chatId, oldMessage);

      // bot.sendMessage(chatId, "d", keyboards.showQuiz());
    }

    if (text === "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó") {
      bot.sendMessage(
        chatId,
        "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–π–¥–µ–Ω—ñ —Ç–µ–º–∏ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
        keyboards.confirmThemes
      );
      bot.sendMessage(
        chatId,
        "–°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ç–µ–º",
        keyboards.mainThemes(themes, "mainThemesIndex")
        // keyboards.keyboards.themesKeyboard2(themes[0].data, formSoloImg.themes)
      );
    }
    if (text == "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ñ–æ—Ç–æ" || text == "–ë–µ–∑ —Ñ–æ—Ç–æ-–∑–≤—ñ—Ç—É") {
      // let res = data.slice(8).split('_')
      // res.pop()
      // console.log(res)
      // let r = themes[res];
      // for (let i = 0; i < res.length; i++) {
      //   r = r[res[i]]

      // }
      // console.log('- - - - ');
      // console.log(r);
      // keyboards.themesKeyboard(r)
      // bot.sendMessage(chatId, 'ss', keyboards.themesKeyboard(r))
      bot.sendMessage(chatId, "–ü–æ—Å—Ç–∞–≤—Ç–µ –æ—Ü—ñ–Ω–∫—É", keyboards.gradeKeyboard());
    }

    if (text === "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —à–∞–±–ª–æ–Ω") {
      if (chatId == myId) {
        let msgForward = await bot.copyMessage(
          templateGroupId,
          chatId,
          msg.message_id - 1
        );

        bot.sendMessage(
          chatId,
          `–®–∞–±–ª–æ–Ω —Å—Ç–≤–æ—Ä–µ–Ω–æ!`,
          keyboards.templateSuccess(groupId, msgForward.message_id)
        );
      }
    }

    oldMessage = text;
  }
});



bot.on("callback_query", async (msg) => {
  const data = msg.data;
  const chatId = msg.message.chat.id;
  try {
    const jsonObject = JSON.parse(data);

    const data_ = JSON.parse(data);

    if (data_.d === "ScheduleDay") {
      const chatId = msg.message.chat.id;
      const messageId = msg.message.message_id;
      let users = await User.find({});
      // console.log(users)
      let bookedTimes = [];
      for (let i = 0; i < users.length; i++) {
        bookedTimes.push(users[i].days);
      }

      // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –¥–Ω–µ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      const newReplyMarkup = keyboards.changeUserSchedule(
        bookedTimes,
        data_.days
      ).reply_markup;

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      bot.editMessageReplyMarkup(newReplyMarkup, {
        chat_id: chatId,
        message_id: messageId,
      });
       bot.answerCallbackQuery(msg.id, {
         text: `‚úÖ –û–±—Ä–∞–Ω—ñ –¥–Ω—ñ: ${data_.days.join(", ")}`,
       });
    }
     if (data_.d === "studentDelete") {
       const chatId = msg.message.chat.id;
       const messageId = msg.message.message_id;
       let users = await User.find({});
       let name = getNamesOneStudentByIdGroup(data_.id)
      bot.sendMessage(chatId, `–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —É—á–Ω—è: <b>${name}</b>?`, {
        parse_mode: "HTML",
      });


       
     }





  if (jsonObject.d == "studentInfo") {
    let link = await bot.getChat(Number(jsonObject.id));
    let userCurrent = await User.find({idGroup: jsonObject.id})
    console.log(userCurrent);
    bot.sendMessage(
      chatId,
      `–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —É—á–Ω—è:
<b><a href="${link.invite_link}">${getNamesOneStudentByIdGroup(
        jsonObject.id
      )}</a></b>

–í—ñ–∫: .
–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å:
–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –∑–∞–Ω—è—Ç—å: .
–ó–º–∞–≥–∞–Ω—å: .
–ì—Ä—É–ø–æ–≤–∏—Ö –∑–∞–Ω—è—Ç—å: .

–ü–æ—á–∞–≤ –∑–∞–Ω—è—Ç—Ç—è: –¥–Ω—ñ–≤ —Ç–æ–º—É.
–°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞: –±–∞–ª—ñ–≤.
–í—Å—å–æ–≥–æ –∞–ª–º–∞–∑—ñ–≤: .
–Ü–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: .
–î–∞—Ç–∞ –æ–ø–ª–∞—Ç–∏: . 
–í—Å—å–æ–≥–æ –æ–ø–ª–∞—Ç–∏–≤: .
–ü—Ä–∏–π—à–æ–≤ –∑: .
–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –¥–æ–º–∞—à–æ–∫: .
–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ:

–í–∂–µ –≤–∏–≤—á–∏–≤ —Ç–µ–º–∏:

        `,
      { parse_mode: "HTML" }
    );
  }


    if (jsonObject.data == "manageBalance") {
      bot.sendMessage(
        chatId,
        `
–í–∏ –±–∞–∂–∞—î—Ç–µ <b>–¥–æ–¥–∞—Ç–∏</b> üíé –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>${getNamesOneStudentByIdGroup(
          jsonObject.id
        )}</b>. 
–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–ª–º–∞–∑—ñ–≤:
      `,
        {
          parse_mode: "HTML",
          ...keyboards.balanceManageNumber(jsonObject.type, jsonObject.id),
        }
      );
    }


  if (jsonObject.d == "cb") {
    console.log('cb++++')
    if (jsonObject.t == "+") {
      console.log(jsonObject.i);
      addUserMoney(jsonObject.i, jsonObject.m);
      bot.sendMessage(
        chatId,
        `
–í–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–ª–∏ <b>${
          jsonObject.m
        }</b>üíé –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>${getNamesOneStudentByIdGroup(
          jsonObject.i
        )}</b>
      `,
        {
          parse_mode: "HTML",
        }
      );
    }

    if (jsonObject.t == "-") {
      console.log(jsonObject.i);
      removeUserMoney(jsonObject.i, jsonObject.m);
      bot.sendMessage(
        chatId,
        `
–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º–µ–Ω—à–∏–ª–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–ª–º–∞–∑—ñ–≤ –Ω–∞ <b>${
          jsonObject.m
        }</b>üíé –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>${getNamesOneStudentByIdGroup(
          jsonObject.i
        )}</b>
      `,
        {
          parse_mode: "HTML",
        }
      );
    }

  }


  }
  catch(e) {
  }

if (data.startsWith("showDate")) {
  let d = data.split("_"); // showDate_üî¥_–í–¢_19:15

  let users = await User.find({});

  let names = {
    –ü–ù: "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫",
    –í–¢: "–í—ñ–≤—Ç–æ—Ä–æ–∫",
    –°–†: "–°–µ—Ä–µ–¥–∞",
    –ß–¢: "–ß–µ—Ç–≤–µ—Ä",
    –ü–¢: "–ü'—è—Ç–Ω–∏—Ü—è",
    –°–ë: "–°—É–±–æ—Ç–∞",
    –ù–î: "–ù–µ–¥—ñ–ª—è",
  };

  for (let user of users) {
    for (let dayObj of user.days) {
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ dayObj –∏–º–µ–µ—Ç –ø–æ–ª—è day –∏ time
      if (names[d[2]] === dayObj.day && d[3] === dayObj.time) {
        let studentName = getNamesOneStudentByIdGroup(user.idGroup);
        bot.sendMessage(
          chatId,
          `<b>‚ö†Ô∏è –¶–µ–π —á–∞—Å –∑–∞–Ω—è—Ç–∏–π.</b>
–í ${names[d[2]]} –æ ${d[3]} –∑–∞–π–º–∞—î—Ç—å—Å—è —É—á–µ–Ω—å: <b>${studentName}</b> `, {parse_mode: 'HTML'}
        );
      }
    }
  }
}


  if (data == "user-changeSchedule") {
    let users = await User.find({})
    // console.log(users)
    let bookedTimes = [];
    for (let i = 0; i < users.length; i++) {
      bookedTimes.push(users[i].days);
    }
    bot.sendMessage(
      chatId,
      `
–ó–∞—Ä–∞–∑ –≤–∞—à —Ä–æ–∑–∫–ª–∞–¥ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –∑–∞–Ω—è—Ç—å –≤–∏–≥–ª—è–¥–∞—î —Ç–∞–∫:


<b>–£–º–æ–≤–Ω—ñ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è:</b>
üî¥ - –ó–∞–Ω—è—Ç–æ
üü† - –ó–∞–Ω—è—Ç–æ –ª–∏—à–µ –Ω–∞ 1 —Ä–∞–∑

‚ö™Ô∏è - –í—ñ–ª—å–Ω–æ
üîò - –í—ñ–ª—å–Ω–æ –ª–∏—à–µ 1 —Ä–∞–∑

üë®‚Äçüéì - –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–µ –∑–∞–Ω—è—Ç—Ç—è
üë• - –ó–∞–Ω—è—Ç—Ç—è –≤ –≥—Ä—É–ø—ñ
üèÜ - –ó–º–∞–≥–∞–Ω–Ω—è –∑ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
üìπ - –í—ñ–¥–µ–æ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
‚úÖ - –¢–µ—Å—Ç–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
üë®‚Äçüíª - –ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è

- –ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è
<b>–û—Å—å –º—ñ–π –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ üëá</b>
    
    `,
      {
        parse_mode: "HTML",
        ...keyboards.changeUserSchedule(bookedTimes),
      }
    );
  }

  if (data.startsWith("correct")) {
    bot.answerCallbackQuery(msg.id, {
      text: "‚úÖ –í—ñ—Ä–Ω–æ!",
      show_alert: false,
    });
    let word = msg.data.slice(8);
    let currentUser = await User.findOne({ idGroup: chatId });
    await User.findOneAndUpdate(
      { idGroup: chatId },
      { $push: { english: word } }
    );
    await currentUser.save();
    let countEngWord = 0;
    
    console.log(currentUser.english);
      for (let i = 0; i < currentUser.english.length; i++) {
        if (word == currentUser.english[i]) {
          countEngWord++
        }
      }
      let uaWord;

      for (let i = 0; i < englishWords.length; i++) {
        if (englishWords[i].english == word) {
          uaWord = englishWords[i].ukranian;
        }
      }
      bot.deleteMessage(chatId, msg.message.message_id);
    if (countEngWord == 4) {
      await drawEnglish(
        word,
        uaWord,
        getNamesOneStudentByIdGroup(chatId).toUpperCase()
      );
      addUserMoney(chatId, 55);
      let cap = `
<b>–í—ñ—Ç–∞—é!</b>
–¢–∏ –≤–∏–≤—á–∏–≤ –Ω–æ–≤–µ –∞–Ω–≥–ª—ñ–π—Å—å–∫–µ —Å–ª–æ–≤–æ:
<b>üá∫üá∏ ${word} - üá∫üá¶ ${uaWord}</b>

–¢–∞–∫–∏–º–∏ —Ç–µ–º–ø–∞–º–∏ —Ç–∏ —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—à –∫—Ä—É—Ç–∏–º IT c–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–æ–º!
      
      `;
      bot.sendPhoto(chatId, "./img/english-new-word-result.png", {parse_mode: 'HTML', caption: cap, ...keyboards.englishNextWord()});
    }
else {

    const questionData = generateQuestion();

    const options = questionData.options.map((word) => word.ukranian);
    const correctAnswer = questionData.correctWord.ukranian;
    let engWord = questionData.correctWord.english;

    const inlineKeyboard = options.map((option, index) => [
      {
        text: option,
        callback_data:
          option === correctAnswer ? "correct-" + engWord : "wrong-" + engWord,
      },
    ]);

    bot.sendMessage(chatId, `–Ø–∫ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î—Ç—å—Å—è —Å–ª–æ–≤–æ ${engWord}?`, {
      reply_markup: {
        inline_keyboard: inlineKeyboard,
      },
    });
  }
  }
  if (data.startsWith("wrong")) {
    bot.answerCallbackQuery(msg.id, {
      text: "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ",
      show_alert: false,
    });
    console.log(msg.data.slice(6));
  }

  if (
    data == "english-tests" ||
    data == "english-next-word" ||
    data == "english-learn"
  ) {
    const questionData = generateQuestion();

    const options = questionData.options.map((word) => word.ukranian);
    const correctAnswer = questionData.correctWord.ukranian;
    const engWord = questionData.correctWord.english;

    const inlineKeyboard = options.map((option, index) => [
      {
        text: option,
        callback_data:
          option === correctAnswer ? "correct-" + engWord : "wrong-" + engWord,
      },
    ]);

    bot.sendMessage(chatId, `–Ø–∫ –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î—Ç—å—Å—è —Å–ª–æ–≤–æ ${engWord}?`, {
      reply_markup: {
        inline_keyboard: inlineKeyboard,
      },
    });
  }

  if (data == "english-nullable-progress") {
    bot.sendMessage(
      chatId,
      "‚ùóÔ∏è –ü—ñ—Å–ª—è —Ü—ñ—î—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–∞–º –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–≤—á–µ–Ω–Ω—è —É—Å—ñ—Ö –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤.\n\n<b>–í–∏ —Ö–æ—á–µ—Ç–µ –æ–Ω—É–ª–∏—Ç–∏ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å?</b>",
      {
        parse_mode: "HTML",
        ...keyboards.confirmEnglishNullable(),
      }
    );
  }


 
  // english-save-progress
  if (data == "english-save-progress") {
    bot.sendMessage(chatId, '–¢–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å –∑–∞–ª–∏—à–∏–≤—Å—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏–º. –ü—Ä–æ–¥–æ–≤–∂—É–π —Ä–æ–∑–≤–∏–≤–∞—Ç–∏—Å—å –¥–∞–ª—ñ!')
  }
  if (data == "english-nullable-progress-confirm") {
    let currentUser = await User.findOne({ idGroup: chatId });
    let engWord = currentUser.english;
    currentUser.english = [];
    await currentUser.save();
    bot.sendMessage(
      chatId,
      "üóë –¢–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å —É—Å–ø—ñ—à–Ω–æ –æ—á–∏—â–µ–Ω–∏–π. \nüá∫üá∏ –ú–æ–∂–µ—à –≤–∏–≤—á–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ —Å–ª–æ–≤–∞ –∑ 0!"
    );
  }
  if (data == "english-statistics") {
    let currentUser = await User.findOne({ idGroup: chatId });
    let engWord = currentUser.english;
    

    // –°—Ç–≤–æ—Ä–∏–º–æ –æ–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—Ö–æ–¥–∂–µ–Ω—å –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    let wordCount = {};

    // –ü—ñ–¥—Ä–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—Ö–æ–¥–∂–µ–Ω—å –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–æ–∫
    for (let word of engWord) {
      if (wordCount[word] === undefined) {
        wordCount[word] = 1;
      } else {
        wordCount[word]++;
      }
    }

    let successEngWord = "";
    let progressEngWord = "";
    let successEngWordCount = 0;
    let progressEngWordCount = 0;

    for (let word in wordCount) {
      if (wordCount[word] >= 5) {
        successEngWord += `‚úÖ  ${word} (${wordCount[word]}/5)\n`;
        successEngWordCount++;
      } else {
        progressEngWord += `‚≠êÔ∏è ${word} (${wordCount[word]}/5)\n`;
        progressEngWordCount++;
      }
    }

    bot.sendMessage(
      chatId,
      `
<b>–í–∏–≤—á–µ–Ω—ñ —Å–ª–æ–≤–∞ (${successEngWordCount}):</b>
${successEngWord}

<b>–í –ø—Ä–æ—Ü–µ—Å—ñ (${progressEngWordCount}):</b>
${progressEngWord}

      
      `,
      { parse_mode: "HTML", ...keyboards.nullableEnglishWords() }
    );
  }

  // bot.answerCallbackQuery(msg.id, "–•–æ—Ä–æ—à–æ");
  if (data.startsWith("elements-")) {
    let element = data.slice(9);
    let el = elementsData[element].variants[0];
    let templateElementsText = `
<b>${el.title}</b>

<u><b>index.html</b></u>

<pre>${escapeHTML(el.code["index.html"])}</pre>
    `;
    bot.sendPhoto(chatId, el.result, {
      parse_mode: "HTML",
      ...keyboards.code(el.id, element, elementsData[element].variants.length),
      caption: templateElementsText,
    });
  }

  if (data.startsWith("code")) {
    let actionElement = data.split("//")[1];
    let dataElement = data.split("//")[2];
    let idElement = data.split("//")[3];

    console.log(actionElement);
    console.log(dataElement);
    console.log(idElement);

    if (actionElement == "STYLE") {
      for (let i = 0; i < elementsData[dataElement].variants.length; i++) {
        if (elementsData[dataElement].variants[i].id == idElement) {
          let templateElementsText = `
<b>${elementsData[dataElement].variants[i].title}</b>

<u><b>style.css</b></u>

<pre>${escapeHTML(
            elementsData[dataElement].variants[i].code["style.css"]
          )}</pre>
    `;

          console.log(elementsData[dataElement].variants[i].result);

          const newPhotoUrl = elementsData[dataElement].variants[i].result;

          const media = {
            type: "photo",
            media: newPhotoUrl,
            caption: templateElementsText,

            parse_mode: "HTML",
          };

          bot
            .editMessageMedia(media, {
              chat_id: chatId,
              message_id: msg.message.message_id,
              ...keyboards.code(
                elementsData[dataElement].variants[i].id,
                dataElement,
                elementsData[dataElement].variants.length,
                i + 1,
                "style.css"
              ),
            })
            .then(() => {
            })
            .catch((error) => {
            });
        }
      }
    }

    if (actionElement == "INDEX") {
      for (let i = 0; i < elementsData[dataElement].variants.length; i++) {
        if (elementsData[dataElement].variants[i].id == idElement) {
          let templateElementsText = `
<b>${elementsData[dataElement].variants[i].title}</b>

<u><b>index.html</b></u>

<pre>${escapeHTML(
            elementsData[dataElement].variants[i].code["index.html"]
          )}</pre>
    `;

          console.log(elementsData[dataElement].variants[i].result);

          const newPhotoUrl = elementsData[dataElement].variants[i].result;

          const media = {
            type: "photo",
            media: newPhotoUrl,
            caption: templateElementsText,

            parse_mode: "HTML",
          };

          bot
            .editMessageMedia(media, {
              chat_id: chatId,
              message_id: msg.message.message_id,
              ...keyboards.code(
                elementsData[dataElement].variants[i].id,
                dataElement,
                elementsData[dataElement].variants.length,
                i + 1,
                "index.html"
              ),
            })
            .then(() => {
              console.log("Message media edited");
            })
            .catch((error) => {
              console.log("Error in editing message media:", error);
            });
        }
      }
    }

    if (actionElement == "SCRIPT") {
      for (let i = 0; i < elementsData[dataElement].variants.length; i++) {
        if (elementsData[dataElement].variants[i].id == idElement) {
          let templateElementsText = `
<b>${elementsData[dataElement].variants[i].title}</b>

<u><b>script.js</b></u>

<pre>${escapeHTML(
            elementsData[dataElement].variants[i].code["script.js"]
          )}</pre>
    `;

          console.log(elementsData[dataElement].variants[i].result);

          const newPhotoUrl = elementsData[dataElement].variants[i].result;

          const media = {
            type: "photo",
            media: newPhotoUrl,
            caption: templateElementsText,

            parse_mode: "HTML",
          };

          bot
            .editMessageMedia(media, {
              chat_id: chatId,
              message_id: msg.message.message_id,
              ...keyboards.code(
                elementsData[dataElement].variants[i].id,
                dataElement,
                elementsData[dataElement].variants.length,
                i + 1,
                "script.js"
              ),
            })
            .then(() => {
              console.log("Message media edited");
            })
            .catch((error) => {
              console.log("Error in editing message media:", error);
            });
        }
      }
    }

    if (actionElement == "NEXT") {
      for (let i = 0; i < elementsData[dataElement].variants.length; i++) {
        if (elementsData[dataElement].variants[i].id == idElement) {
          if (i == elementsData[dataElement].variants.length - 1) {
            bot.answerCallbackQuery(msg.id, {
              text: "–ë—ñ–ª—å—à–µ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î",
              show_alert: false,
            });
          } else {
            let templateElementsText = `
<b>${elementsData[dataElement].variants[i + 1].title}</b>

<u><b>index.html</b></u>

<pre>${escapeHTML(
              elementsData[dataElement].variants[i + 1].code["index.html"]
            )}</pre>
    `;

            console.log(elementsData[dataElement].variants[i + 1].result);

            const newPhotoUrl =
              elementsData[dataElement].variants[i + 1].result;

            const media = {
              type: "photo",
              media: newPhotoUrl,
              caption: templateElementsText,

              parse_mode: "HTML",
            };

            bot
              .editMessageMedia(media, {
                chat_id: chatId,
                message_id: msg.message.message_id,
                ...keyboards.code(
                  elementsData[dataElement].variants[i + 1].id,
                  dataElement,
                  elementsData[dataElement].variants.length,
                  i + 2
                ),
              })
              .then(() => {
                console.log("Message media edited");
              })
              .catch((error) => {
                console.log("Error in editing message media:", error);
              });
          }
        }
      }
    }

    if (actionElement == "PREV") {
      for (let i = 0; i < elementsData[dataElement].variants.length; i++) {
        if (elementsData[dataElement].variants[i].id == idElement) {
          if (i == 0) {
            bot.answerCallbackQuery(msg.id, {
              text: "–ë—ñ–ª—å—à–µ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î",
              show_alert: false,
            });
          } else {
            let templateElementsText = `
<b>${elementsData[dataElement].variants[i - 1].title}</b>

<u><b>index.html</b></u>

<pre>${escapeHTML(
              elementsData[dataElement].variants[i - 1].code["index.html"]
            )}</pre>
    `;

            console.log(elementsData[dataElement].variants[i - 1].result);

            const newPhotoUrl =
              elementsData[dataElement].variants[i - 1].result;

            const media = {
              type: "photo",
              media: newPhotoUrl,
              caption: templateElementsText,

              parse_mode: "HTML",
            };

            bot
              .editMessageMedia(media, {
                chat_id: chatId,
                message_id: msg.message.message_id,
                ...keyboards.code(
                  elementsData[dataElement].variants[i - 1].id,
                  dataElement,
                  elementsData[dataElement].variants.length,
                  i
                ),
              })
              .then(() => {
              })
              .catch((error) => {
              });
          }
        }
      }
    }

    if (actionElement == "VIDEO") {
      for (let i = 0; i < elementsData[dataElement].variants.length; i++) {
        if (elementsData[dataElement].variants[i].id == idElement) {
          bot.sendVideo(chatId, elementsData[dataElement].variants[i].video);
        }
      }
    }
  }

  if (data == "learnTheme-video") {
    bot.sendMessage(chatId, "–û—Å—å –≤—ñ–¥–µ–æ –ø–æ –¥–∞–Ω—ñ–π —Ç–µ–º—ñ:");
  }
  if (data == "learnTheme-tests") {
    bot.sendMessage(chatId, "–û—Å—å —Ç–µ—Å—Ç–∏ –ø–æ –¥–∞–Ω—ñ–π —Ç–µ–º—ñ:");
  }
  if (data == "learnTheme-practice") {
    bot.sendMessage(chatId, "–û—Å—å –ø—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ –¥–∞–Ω—ñ–π —Ç–µ–º—ñ:");
  }
  if (data == "learnTheme-similarTags") {
    bot.sendMessage(chatId, "–û—Å—å —Å—Ö–æ–∂—ñ —Ç–µ–º–∏:");
  }
  if (data == "regStudent") {
    newUserStatus = "name";
    bot.sendMessage(chatId, "–í–∫–∞–∂—ñ—Ç—å —ñ–º'—è —É—á–Ω—è");
  }
  if (data.startsWith("testAnswer-")) {
    console.log(msg);
    console.log(msg.message.message_id);
    console.log(msg.message.reply_markup);
    try {
      bot.editMessageReplyMarkup(
        keyboards.editTest(msg.message.reply_markup, msg.data, bot, chatId),
        {
          message_id: msg.message.message_id,
          chat_id: chatId,
        }
      );
    } catch (e) {
      console.log(e);
    }
  }

  if (newUserStatus) {
    if (newUserStatus == "schedule") {
      userDay = {
        day: "",
        time: "",
      };
      userDay.day = data.slice(9);
      bot.sendMessage(chatId, "–í–∫–∞–∂—ñ—Ç—å —á–∞—Å –∑–∞–Ω—è—Ç—å", keyboards.keyboardTimeWeek);
      newUserStatus = "time";
    } else if (newUserStatus == "time") {
      userDay.time = data.slice(9);
      newUserStatus = "nextDay";
      newUser.days.push(userDay);
      userDay = [];
      bot.sendMessage(
        chatId,
        "–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ –æ–¥–∏–Ω –¥–µ–Ω—å –∑–∞–Ω—è—Ç—å?",
        keyboards.keyboardIsNextDay
      );
      newUserStatus = "nextDay!";
    } else if (newUserStatus == "nextDay!") {
      if (data == "nextDayTrue") {
        newUserStatus = "group";
        bot.sendMessage(
          chatId,
          "–í–∫–∞–∂—ñ—Ç—å –¥–Ω—ñ —Ç–∞ –≥–æ–¥–∏–Ω–∏ –≤ —è–∫—ñ –±—É–¥—É—Ç—å –ø—Ä–æ—Ö–æ–¥–∏—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è",
          keyboards.keyboardDaysWeek
        );
        newUserStatus = "schedule";
      }
      if (data == "nextDayFalse") {
        newUserStatus = "idGroup";
        bot.sendMessage(chatId, "–í–∫–∞–∂—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è –∑–∞ –º—ñ—Å—è—Ü—å");
      }
    }
  }

  if (data.startsWith("deleteThemes-")) {
    try {
      let theme = data.slice(13);
      formSoloImg.themes.splice(theme, 1);
      bot.sendMessage(chatId, "–¢–µ–º–∞: <b>" + theme + "</b> —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞!", {
        parse_mode: "HTML",
      });
    } catch (e) {}
  }

  if (data.startsWith("infoStudent-")) {
    try {
      let getId = data.slice(12);
      let link = await bot.getChat(Number(getId));
      bot.sendMessage(chatId, link.invite_link);
    } catch (e) {}
  }

  if (data.startsWith("mainThemesIndex-")) {
    let themeIndex = data.slice(16);
    currentThemes = themes[themeIndex].data;

    formSoloImg.themes.push("++" + themes[themeIndex].title);

    bot.sendMessage(
      chatId,
      "–¢–µ–º–∞: " + themes[themeIndex].title + " –æ–±—Ä–∞–Ω–∞!",
      keyboards.themesKeyboard2(currentThemes, formSoloImg.themes)
    );
  }
  if (data.startsWith("newTheme-")) {
    let themeIndex = data.slice(9);
    currentThemes = themes[themeIndex].data;

    formSoloImg.themes.push("++" + themes[themeIndex].title);

    bot.sendMessage(
      chatId,
      "–¢–µ–º–∞: " + themes[themeIndex].title + " –æ–±—Ä–∞–Ω–∞!",
      keyboards.themesKeyboard2(currentThemes, formSoloImg.themes)
    );
  }
  if (data == "balanceStudent") {
    bot.sendMessage(
      chatId,
      "–û–±–µ—Ä—ñ—Ç—å —É—á–Ω—è —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–±–æ –≤—ñ–¥–Ω—è—Ç–∏ –∞–ª–º–∞–∑–∏:",
      await keyboards.chooseStudents('balance')
    );
  }
  if (data.startsWith("balance-/-")) {
    let splitData = data.split("-/-");
    let id = splitData[splitData.length-1]
    bot.sendMessage(
      chatId,
      `–£—á–µ–Ω—å <b>${getNamesOneStudentByIdGroup(
        id
      )}</b> –æ–±—Ä–∞–Ω–∏–π. 
–í–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∞–ª–º–∞–∑–∏ —á–∏ –≤—ñ–¥–Ω—è—Ç–∏?`,
      { parse_mode: "HTML", ...keyboards.adminManageBalance(id) }
    );
  }

  if (data == "sendTests") {
    currentThemes = themes[0];
    bot.sendMessage(
      chatId,
      "–û–±–µ—Ä—ñ—Ç—å –ø–æ —è–∫–∏–º —Ç–µ–º–∞–º –º–∞—é—Ç—å –±—É—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è:",
      keyboards.themesKeyboard2(currentThemes, formSoloImg.themes)
    );
    typeThemes = "tests";
  }
  if (data == "sendPractice") {
    currentThemes = themes[0];
    bot.sendMessage(
      chatId,
      "–û–±–µ—Ä—ñ—Ç—å –ø–æ —è–∫–∏–º —Ç–µ–º–∞–º –º–∞—é—Ç—å –±—É—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è:",
      keyboards.themesKeyboard2(currentThemes, formSoloImg.themes)
    );
    typeThemes = "practice";
  }

  if (data.startsWith("deleteTemplate-")) {
    bot.deleteMessage(templateGroupId, data.slice(15));
  }

  if (data.startsWith("newLesson-/-")) {
    let dataList = data.split("-/-");
    let name = dataList[1];
    formSoloImg.idGroup = dataList[2];
    formSoloImg.name = name;

    let currentDate = time.day + "." + time.month + "." + time.year;

    bot.sendMessage(
      chatId,
      "–£—á–µ–Ω—å: <b>" +
        name +
        "</b> –æ–±—Ä–∞–Ω–∏–π. \n–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥–∞—Ç—É, –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Å–≤–æ—é: ",
      { parse_mode: "HTML" }
    );
    bot.sendMessage(chatId, currentDate, keyboards.confirmDate(currentDate));
  }
  if (data.startsWith("themesIndex")) {
    try {
      if (typeThemes == "learn") {
        let currentTheme = currentThemes[+data.slice(12)].details;
        console.log("learn");

        console.log("currentThemesNew", currentTheme);

        function generateHTMLLinks() {
          let links = ``;
          currentTheme.links.forEach((link) => {
            links += `<a href="${link.url}">üìë ${link.title}</a>\n`;
          });
          return links;
        }
        let kb = await keyboards.theme(currentTheme);

               await bot.sendPhoto(chatId, currentTheme.default.images[0].url, {
                 caption: `
*–í–∏–≤—á–∞—î–º–æ —Ç–µ–º—É: ${currentTheme.title.trim()}*
*–°–∫–æ—Ä–æ—á–µ–Ω–æ: ${currentTheme.speedCode.trim()}*
${currentTheme.description}
  `,
                 parse_mode: "Markdown",
               });

let allCode = ''
for (let item of currentTheme.default.code) {
  allCode += `
üßë‚Äçüíª ${item.title}
\`${item.body}\``;
}

let allSandbox = "";
for (let item of currentTheme.default.sandbox) {
  allSandbox += `
üî∏ [${item.title}](${item.url.trim()})`;
}
let allFigma = "";
for (let item of currentTheme.default.figma) {
  allFigma += `
üî∏ [${item.title}](${item.url.trim()})`;
}
let allLinks = "";
for (let item of currentTheme.links) {
  allLinks += `
üîπ [${item.title}](${item.url.trim()})`;
}



            await bot.sendMessage(
              chatId,
              `
*–ü—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–¥—É:*
${allCode}
 
*–ü—Ä–∏–∫–ª–∞–¥–∏ –≤ –ø—ñ—Å–æ—á–Ω–∏—Ü—ñ:*
${allSandbox}

*–ü—Ä–∏–∫–ª–∞–¥–∏ –≤ Figma:*
${allFigma}

*–ü–æ—Å–∏–ª–∞–Ω–Ω—è –ø–æ —Ç–µ–º—ñ:*
${allLinks}
 
  `,
              { parse_mode: "Markdown", disable_web_page_preview: true, ...kb }
            );    


  //       bot.sendMessage(
  //         chatId,
  //         `
  // **${currentTheme.title.trim()}**
  
  // ${currentTheme.description}

  // <b>${generateHTMLLinks()}</b>
  // `,
  //         { parse_mode: "Markdown", ...kb }
  //       );
      }

      if (typeThemes == "tests") {
        let currentThemesNew = currentThemes[+data.slice(12)];
        console.log("444");
        let ddata = currentThemesNew.details.tests;

        for (let i = 0; i < ddata.length; i++) {
          let idTest = uuid().slice(0, 8);
          let options = currentThemesNew.details.tests[i].options;
          let rightAnswer = options[0];
          let optionsText = [];
          let newOptions_ = [...options];
          let newOptions = shuffle(newOptions_);
          newOptions.forEach((option) => {
            optionsText.push(`\n‚ñ™Ô∏è ${option}`);
          });
          let studentsCurrent = getNamesStudentByIdGroup(newGroupStudent);
          let prettyStudents = "";
          studentsCurrent.forEach((student) => {
            prettyStudents += `\n<b>${student}</b>`;
          });
          let title = currentThemesNew.details.tests[i].title;
          let infoMessage = `
<b>${title}</b>
${optionsText}

–í—ñ–¥–ø–æ–≤—ñ–¥—ñ —É—á–Ω—ñ–≤:
${prettyStudents}

–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:
<span class="tg-spoiler"><b>${rightAnswer}</b></span>
id: ${idTest}
        `;

          let message = await bot.sendMessage(chatId, infoMessage, {
            parse_mode: "HTML",
          });

          let idMessage = message.message_id;
          testsID.push({
            idQuiz: idTest,
            idMessage: idMessage,
            answers: {
              right: [],
              error: [],
              notData: [],
            },
            title: title,
            options: optionsText,
            rightAnswer: rightAnswer,
          });
          await testsImage(title);

          newGroupStudent.forEach(async (id) => {
            bot.sendPhoto(id, "./img/tests-create.png", {
              caption: "<b>" + ddata[i].title + "</b>",
              ...keyboards.createTest(ddata[i].options, idTest),
              parse_mode: "HTML",
            });
          });
        }
      }

      if (typeThemes == "practice") {
        console.log(data); // themesIndex-70
        // let idPracticeTask = [1];
        let currentThemesNew = currentThemes[+data.slice(12)];
        console.log(
          "currentThemesNew",
          currentThemesNew.details.tasks.practice
        );
        idPracticeTask = currentThemesNew.details.tasks.practice;
        /* 


        details: {
          title: 'title',
          speedCode: 'title',
          description: '\n' +
            "<b>title</b> - –í —Ü–µ–π —Ç–µ–≥ –º–∏ –ø–∏—à–µ–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –∞–¥—Ä–µ—Å—É, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –∞–¥—Ä–µ—Å—É, —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ, –Ω–∞—à —Å–∞–π—Ç, —ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ.\n" +
            '–¢–µ–≥ address —î —Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏–º, —Ç–æ–±—Ç–æ –º–∞—î —Å–µ–Ω—Å.\n' +
            "–¶–µ–π –µ–ª–µ–º–µ–Ω—Ç –∑'—è–≤–∏–≤—Å—è –≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π, 5 –≤–µ—Ä—Å—ñ—ó HTML. –î–æ 2015 —Ä–æ–∫—É –π–æ–≥–æ –Ω–µ –±—É–ª–æ.\n" +
            '        ',
          tasks: { speed: [Array] },
          tests: [ [Object] ],
          default: {
            figma: [Array],
            images: [Array],
            sandbox: [Array],
            code: [Array]
          },
          amount: 0,
          similarTags: [ 'article', 'time' ],
          links: [ [Object], [Object] ]
        },
        childrens: []
      }

        */

        for (let i = 0; i < idPracticeTask.length; i++) {
          let practiceTasks = await Practice.findOne({ id: idPracticeTask[i] });
          try {
            let templateObjectData = {
              output: "./img/practice-old.png",
              html: `<html>
  <body>
   ${practiceTasks.data.html}
   
  <style>
        ${practiceTasks.data.css}
  </style>

  </body>
  </html>
  
  `,
            };

            await nodeHtmlToImage(templateObjectData);

            let resultCSS = "";

            console.log("practiceTasks.data.html", practiceTasks);

            await nodeHtmlToImage({
              output: "./img/practice-result.png",
              html: `<html>
  <body>
   ${practiceTasks.data.html}
   ${practiceTasks.codeResult.html}
  <style>
      
        
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }
        body {
          padding: 20px;
          zoom: 150%;
        }
        ${practiceTasks.data.css}
        ${practiceTasks.codeResult.css}

  </style>
  </body>
  </html>
  
  `,
            }).then(() => console.log("The image was created successfully!"));

            await nodeHtmlToImage({
              output: "./img/practice-result-tobase64.png",
              html: `<html>
  <body>
  ${practiceTasks.data.html}
   ${practiceTasks.codeResult.html}
        <h1 class="template">–®–ê–ë–õ–û–ù</h1>
  <style>

        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: sans-serif;
        }
        body {
          padding: 10px;
          width: 800px;
        }
        .template {
          font-size: 70px;
          font-weight: 100;
          position: absolute;
          top: 180px;
          left: 150px;
          letter-spacing: 30px;
          color: grey;
          transform: rotate(-45deg);
        }

         ${practiceTasks.data.css}
        ${practiceTasks.codeResult.css}
  </style>
  </body>
  </html>
  
  `,
            }).then(() => console.log("The image was created successfully!"));

            practiceList.push({
              idPractice: idPracticeTask[i],
              photo:
                "data:image/jpeg;base64," +
                (await imageToBase64("./img/practice-result-tobase64.png")),
              students: [],
            });

            let title = practiceTasks.name;
            let themes = practiceTasks.themes;
            let descriptionText = practiceTasks.description;
            let tasks = practiceTasks.tasks.title;
            let id = practiceTasks.id;
            await drawPracticeTask(title, descriptionText, themes, tasks);
            let tasksItems = "";
            practiceTasks.tasks.forEach((task) => {
              tasksItems += `‚ñ™Ô∏è ${task.title} ${task.label}
`;
            });

            let templateCaption = `
<b>${title}</b>
–û–ø–∏—Å:
<i>${descriptionText}</i>

<b>–ó–∞–≤–¥–∞–Ω–Ω—è:</b>
${tasksItems}

–°—Ç–∞—Ç—É—Å: <b>–í —Ä–æ–±–æ—Ç—ñ</b>
<pre>${id}</pre>

    `.slice(0, 1023);
            await drawPracticeTask(title, descriptionText, themes, tasks);

            newGroupStudent.forEach(async (id) => {
              practiceList[i].students.push({
                idStudent: Number(id),
                result: {
                  successTask: [],
                  wrongTask: [],
                },
                historyCode: [
                  {
                    html: "",
                    css: "",
                    js: "",
                  },
                ],
                finish: false,
                grade: 6,
                time: 0,
                finishCode: {
                  html: "",
                  css: "",
                  js: "",
                },
              });

              bot.sendPhoto(id, "./img/practice-result-canvas.png", {
                caption: templateCaption,
                ...keyboards.practiceKeyboard(id, idPracticeTask[i]),
                parse_mode: "HTML",
              });
            });
          } catch (e) {}
        }

        await studentListPractice.insertMany(practiceList);
        practiceList = [];

        // console.log(practiceList);
      } else if (typeThemes == "tests") {
        let currentThemesOld = currentThemes[+data.slice(12)];
        currentThemes = currentThemes[+data.slice(12)].childrens;
        if (currentThemes.length == 0) {
          currentThemes = themes[0].data;

          formSoloImg.themes.push(currentThemesOld.details.title);

          let readyThemes = [];
          formSoloImg.themes.forEach((item) => {
            readyThemes.push(`\n‚ñ™Ô∏è ${item}`);
          });
          bot.deleteMessage(chatId, msg.message.message_id);
          bot.deleteMessage(chatId, msg.message.message_id - 1);
          bot.sendMessage(
            chatId,
            `–¢–µ–º–∞ <b>${currentThemesOld.details.title}</b> –æ–±—Ä–∞–Ω–∞! 
  
–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–Ω–∏—Ö —Ç–µ–º –Ω–∞ –∑–∞—Ä–∞–∑:
${readyThemes}

–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É —Ç–µ–º—É, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:`,
            {
              parse_mode: "HTML",
              ...keyboards.themesKeyboard2(currentThemes, formSoloImg.themes),
            }
          );
        } else {
          bot.sendMessage(
            chatId,
            "–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–µ–º—É:",
            keyboards.themesKeyboard2(currentThemes, formSoloImg.themes)
          );
        }
      }
    } catch (e) {
      console.log(e);
    }
    bot.answerCallbackQuery(msg.id);
  }

  if (data == "getMoney") {
    bot.sendMessage(
      chatId,
      "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ (–±—É–¥—å —è–∫–æ–≥–æ –±–∞–Ω–∫—É). –ù–∞ —Ü—é –∫–∞—Ä—Ç–∫—É –≤–∞–º –ø—Ä–∏–π–¥—É—Ç—å –∫–æ—à—Ç–∏",
      { parse_mode: "HTML" }
    );
    waitCardNumber = true;
  }

  if (data.startsWith("user-")) {
    let text = data.slice(5);

    if (text == "getCoins") {
    }
    if (text == "changeCar") {
    }
    if (text == "balance") {
      let currentUser = await User.findOne({ idGroup: chatId });
      console.log(currentUser);
      if (currentUser) {
        bot.sendMessage(
          chatId,
          `
<b>–ü—Ä–∏–≤—ñ—Ç! –ó–∞—Ä–∞–∑ –≤ —Ç–µ–±–µ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ:</b>
üíé ${currentUser.diamonds} –∞–ª–º–∞–∑—ñ–≤
üíµ ${currentUser.quiz.currentMoney} –≥—Ä–Ω 

‚ñ™Ô∏è –∑–∞ –≤–µ—Å—å —á–∞—Å —Ç–∏ –∑–∞—Ä–æ–±–∏–≤ ${currentUser.quiz.allMoney} –≥—Ä–Ω
‚ñ™Ô∏è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—î –∑–º–∞–≥–∞–Ω–Ω—è —Ç–∏ –∑–∞—Ä–æ–±–∏–≤ ${currentUser.quiz.lastResultMoney} –≥—Ä–Ω

<b>–¢–∏ –º–æ–∂–µ—à –∑–∞—Ä–æ–±–∏—Ç–∏ üíµ:</b>
‚ñ™Ô∏è –ü—Ä–∏—î–¥–Ω—É—é—á–∏—Å—å –Ω–∞ –∑–º–∞–≥–∞–Ω–Ω—è —â–æ—á–µ—Ç–≤–µ—Ä–≥–∞ –æ 20:00 –∑–∞ –ö–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º.

<b>–¢–∏ –º–æ–∂–µ—à –∑–∞—Ä–æ–±–∏—Ç–∏ üíé –∑–∞:</b>
‚ñ™Ô∏è –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è
‚ñ™Ô∏è –ù–∞ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–º—É –∑–∞–Ω—è—Ç—Ç—ñ –ø–æ–∫–∞–∑–∞–≤—à–∏ –±—É–¥—å-—è–∫—É —Ä–æ–±–æ—Ç—É
‚ñ™Ô∏è –ì—Ä—É–ø–æ–≤—ñ –∑–∞–Ω—è—Ç—Ç—è
‚ñ™Ô∏è –©–æ–¥–µ–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
‚ñ™Ô∏è –©–æ–¥–µ–Ω–Ω—ñ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
‚ñ™Ô∏è –ü–µ—Ä–µ–≥–ª—è–¥ –≤—ñ–¥–µ–æ

    `,
          {
            parse_mode: "HTML",
          }
        );
      } else {
        bot.sendMessage(
          chatId,
          "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
          keyboards.keyboardTask
        );
      }
    }
    if (text == "english") {
      let currentUser = await User.findOne({ idGroup: chatId });

      let a = [];
      let count = 0;

      let counts = {};
      let result = [];

      // –ü–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      for (let i = 0; i < currentUser.english.length; i++) {
        counts[currentUser.english[i]] =
          (counts[currentUser.english[i]] || 0) + 1;
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞
      for (let key in counts) {
        if (counts[key] >= 5) {
          result.push(Number(key));
        }
      }

      let learnedWords = result.length; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
      let totalWords = englishWords.length; // –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤

      let percentage = (learnedWords / totalWords) * 100;

      bot.sendMessage(
        chatId,
        `
<b>–ó–∞—Ä–∞–∑ —Ç–∏ –≤–∂–µ –≤–∏–≤—á–∏–≤ ${percentage.toFixed(2)}% –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Å–ª—ñ–≤</b>
(${learnedWords} —Å–ª–æ–≤–∞ –∑ ${totalWords}):

‚ö†Ô∏è –°–ª–æ–≤–æ –≤–≤–∞–∂–∞—î—Ç—å—Å—è –≤–∏–≤—á–µ–Ω–∏–º, —è–∫—â–æ –≤–∏ –¥–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 5 —Ä–∞–∑—ñ–≤.

–ü—Ä–æ–¥–æ–≤–∂—É–π –¥–∞–ª—ñ, —ñ —Ç–∏ –¥–æ—Å—è–≥–Ω–µ—à —É—Å–ø—ñ—Ö—É üí™
`,
        {
          parse_mode: "HTML",
          ...keyboards.english(englishWords),
        }
      );
      typeThemes = "learn";
    }
    if (text == "newTheme") {
      bot.sendMessage(
        chatId,
        `<b>üíª –ù–∞–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—é —è–∫–∞ —Ç–æ–±—ñ –∑–∞—Ä–∞–∑ —Ü—ñ–∫–∞–≤–∞.</b>
<i>–ù–∞–ø—Ä–∏–∫–ª–∞–¥ HTML, CSS, javascript –∞–±–æ —ñ–Ω—à—É üëá</i>
        `,
        {
          parse_mode: "HTML",
          ...keyboards.mainThemes(themes, "newTheme"),
        }
      );
      typeThemes = "learn";
    }
    if (text == "getTasks") {
      bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è", keyboards.keyboardTask);
    }
    if (text == "savedWork") {
    }
    if (text == "successes") {
    }
    if (text == "myGrade") {
    }
    if (text == "getCoins") {
    }
    if (text == "gpt") {
      let gptTips = `<b>–û—Å—å –¥–µ–∫—ñ–ª—å–∫–∞ –ø–æ—Ä–∞–¥ —è–∫ –∫—Ä–∞—â–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∑–∞–ø–∏—Ç –®—Ç—É—á–Ω–æ–º—É –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É:</b>


‚ñ™Ô∏è <b>–ß—ñ—Ç–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω–Ω—è.</b>
–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ —è—Å–Ω–æ.

‚ñ™Ô∏è <b>–ù–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç.</b>
–©–æ –≤–∏ –Ω–∞–º–∞–≥–∞—î—Ç–µ—Å—è –¥–æ—Å—è–≥—Ç–∏ –∑ —Ü–∏–º –∫–æ–¥–æ–º?

‚ñ™Ô∏è <b>–ü—Ä–∏–∫–ª–∞–¥ –∫–æ–¥—É.</b>
–ù–∞–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥—É, —è–∫–∏–π –≤–∏–∫–ª–∏–∫–∞—î –ø—Ä–æ–±–ª–µ–º—É. –û–ø—Ç–∏–º–∞–ª—å–Ω–æ: 10-20 —Ä—è–¥–∫—ñ–≤. –Ø–∫—â–æ –∫–æ–¥ –±—ñ–ª—å—à–∏–π, –Ω–∞–º–∞–≥–∞–π—Ç–µ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É –≤ –º–µ–Ω—à–æ–º—É –æ–±—Å—è–∑—ñ.

‚ñ™Ô∏è <b>–ü–æ–º–∏–ª–∫–∏.</b>
–Ø–∫—â–æ —É –≤–∞—Å —î –ø–æ–º–∏–ª–∫–∏, –Ω–∞–¥–∞–π—Ç–µ –ø–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.

‚ñ™Ô∏è <b>–û—á—ñ–∫—É–≤–∞–Ω—ñ —Ç–∞ —Ä–µ–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.</b>
–û–ø–∏—à—ñ—Ç—å, —è–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏ –æ—á—ñ–∫—É—î—Ç–µ –≤—ñ–¥ –∫–æ–¥—É —ñ —â–æ –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ.

‚ñ™Ô∏è <b>–ó—Ä–æ–±–ª–µ–Ω—ñ —Å–ø—Ä–æ–±–∏.</b>
–©–æ –≤–∏ –≤–∂–µ —Å–ø—Ä–æ–±—É–≤–∞–ª–∏, —â–æ–± –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É?

‚ñ™Ô∏è <b>–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è.</b>
–©–æ–± –≤–∞—à –∫–æ–¥ –±—É–≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –æ–±—Ä–∞–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–¥—É –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ.


<b>–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è Chat GPT üëá</b>
`;
      bot.sendMessage(chatId, gptTips, { parse_mode: "HTML" });
    }

    if (text == "schedule") {
    }
    if (text == "changeSchedule") {
    }
    if (text == "statistics") {
       bot.sendMessage(
         chatId,
         `
<b>–í—ñ—Ç–∞—é –≤–∞—Å –≤ —Ä–æ–∑–¥—ñ–ª—ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.</b>
–û–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –∑–∞ —è–∫–∏–π –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ –≤–∞—à—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è üëá
       `,
         { parse_mode: "HTML", ...keyboards.statPeriod(chatId) }
       );
    }
    if (text == "competitions") {
      let currentUser = await User.findOne({ idGroup: chatId });

      if (currentUser) {
        let curMoney = currentUser.quiz.currentMoney;
        let kbMoney = {};
        let moneyText =
          "‚ö†Ô∏è –©–æ–± –≤–∏–≤–µ—Å—Ç–∏ –∫–æ—à—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–∫—É –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–∑–±–∏—Ä–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 300 –≥—Ä–Ω.";
        if (curMoney >= 300) {
          moneyText =
            'ü•≥ –í—ñ—Ç–∞—é! –í–∏ –≤–∂–µ –º–æ–∂–µ—Ç–µ –≤–∏–≤–µ—Å—Ç–∏ –≤–∞—à—ñ –∫–æ—à—Ç–∏. –¢–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–∑–Ω—è—Ç–∏ –∫–æ—à—Ç–∏" —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏!';
          kbMoney = keyboards.getMoney(curMoney);
        }
        bot.sendMessage(
          chatId,
          `
–ù–∞ –≤–∞—à–æ–º—É –±–∞–ª–∞–Ω—Å—ñ
${curMoney} –≥—Ä–Ω

<i>${moneyText}</i>
    `,
          { parse_mode: "HTML", ...kbMoney }
        );
      }
    }
    if (text == "pay") {
    }
    if (text == "program") {
    }
    if (text == "settings") {
      bot.sendMessage(
        chatId,
        `
–í–∏ –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å.

–û–±–µ—Ä—ñ—Ç—å —â–æ —Å–∞–º–µ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏üëá
`,
        keyboards.keyboardStudentsSettings
      );
    }
  }

  if (data.startsWith("themesBack")) {
    bot.sendMessage(
      chatId,
      "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–π–¥–µ–Ω—ñ —Ç–µ–º–∏ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
      keyboards.confirmThemes
    );
    bot.sendMessage(
      chatId,
      "–°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö —Ç–µ–º",
      keyboards.mainThemes(themes, "mainThemesIndex")
      // keyboards.keyboards.themesKeyboard2(themes[0].data, formSoloImg.themes)
    );
  }

  if (data == "students") {
    let kb = await keyboards.chooseStudents('showStudent');
    let students = await User.find({});
    bot.sendMessage(
      chatId,
      `–ó–∞—Ä–∞–∑ —É –≤–∞—Å –Ω–∞–≤—á–∞—î—Ç—å—Å—è <b>${students.length} —É—á–Ω—ñ–≤</b>. 
–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —ñ–º'—è —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏ –¥–∞–Ω—ñ —É—á–Ω—è üëá`,
      {
        parse_mode: "HTML",
        ...kb,
      }
    );
  }
   if (data == "pays") {
     let students = await User.find({});
     bot.sendMessage(
       chatId,
       `–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–ø–ª–∞—Ç–∏ —É—á–Ω—ñ–≤:
–í —Ü—å–æ–º—É –º—ñ—Å—è—Ü—ñ –ø—Ä–∏–±—É—Ç–æ–∫:

–í–∂–µ –ø—Ä–∏–π—à–ª–∏ –∫–æ—à—Ç–∏:
–©–µ –º–∞—é—Ç—å –ø—Ä–∏–π—Ç–∏:
–û–ø–ª–∞—Ç–∏ –ø–æ –¥–∞—Ç–∞–º:
`,
       {
         parse_mode: "HTML",
       }
     );
   }
   if (data == "adminEnglishStat") {
    console.log('012')
    bot.sendMessage(
      chatId,
      "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–≤—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏—Ö —Å–ª—ñ–≤",
    );
  }
  if (data == "registeredLesson") {
    bot.sendMessage(
      chatId,
      "–û–±–µ—Ä—ñ—Ç—å —É—á–Ω—è üëá",
      await keyboards.chooseStudents("newLesson")
    );
  }
  if (data == "createTemplate") {
    bot.sendMessage(
      chatId,
      "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –±—É–¥–µ —à–∞–±–ª–æ–Ω–æ–º –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏. –ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å: –ì–æ—Ç–æ–≤–æ",
      keyboards.confirmSave
    );
  }

  if (data == "quiz") {
    bot.sendMessage(chatId, `<b>–ó–º–∞–≥–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ.</b> 
    –í –∑–º–∞–≥–∞–Ω–Ω—ñ –ø—Ä–∏–π–º–∞—é—Ç—å —É—á–∞—Å—Ç—å 5 –ª—é–¥–µ–π: 
    
    `
    , keyboards.registeredQuiz); // result(chatId)
  }

  if (data == "templates") {
    bot.sendMessage(
      chatId,
      "–û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –¥—ñ—é",
      keyboards.templatesKeyboard
    );
  }
  if (data == "keyboards.themesDelete") {
    bot.sendMessage(
      chatId,
      "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
      keyboards.themesDelete(formSoloImg.themes)
    );
  }
  if (data == "chooseAllStudent") {
    let users = await User.find({});
    for (let i = 0; i < users.length; i++) {
      newGroupStudent.push(users[i].idGroup);
    }

    bot.sendMessage(chatId, "‚úÖ –£—Å—ñ —É—á–Ω—ñ –≤–∏–±—Ä–∞–Ω—ñ");
  }
  if (data == "createGroup") {
    bot.sendMessage(
      chatId,
      "–û–±–µ—Ä—ñ—Ç—å —É—á–Ω—ñ–≤:",
      await keyboards.chooseStudents("createGroup")
    );
    bot.sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å —É—á–Ω—ñ–≤:", keyboards.confirmNewGroup);
  }

  if (data == "clearGroup") {
    await studentListPractice.deleteMany({});
    newGroupStudent = [];
    bot.sendMessage(chatId, "–í –≥—Ä—É–ø—ñ –Ω–µ–º–∞—î –ª—é–¥–µ–π");
  }

  if (data.startsWith("newGroupStudent-/-")) {
    let index = "newGroupStudent-/-".length;
    let studentGroupID = data.slice(index);

    newGroupStudent.push(studentGroupID);
    bot.sendMessage(
      chatId,
      "–£—á–µ–Ω—å: " + getNamesOneStudentByIdGroup(studentGroupID) + " –æ–±—Ä–∞–Ω–∏–π!",
      keyboards.confirmNewGroup
    );
  }

  if (data.startsWith("showStudent-/-")) {
    let index = "showStudent-/-".length;
    let studentGroupID = data.slice(index);

    newGroupStudent.push(studentGroupID);
    bot.sendMessage(
      chatId,
      `–í–∏ –æ–±—Ä–∞–ª–∏ —É—á–Ω—è: <b>${getNamesOneStudentByIdGroup(studentGroupID)}</b>
–û–±–µ—Ä—ñ—Ç—å —â–æ —Å–∞–º–µ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ üëá
      `,
      {
        parse_mode: "HTML",
        ...keyboards.studentChange(studentGroupID),
      }
    );
  }

  if (data.startsWith("selectTechnologies-")) {
    bot.answerCallbackQuery(msg.id);
    let newTechnology = data.slice(19);
    if (formSoloImg.technologies.includes(newTechnology)) {
      let index = formSoloImg.technologies.indexOf(newTechnology);
      formSoloImg.technologies.splice(index, 1);
    } else {
      formSoloImg.technologies.push(newTechnology);
    }
    let aa = keyboards.technologiesKeyboard(
      formSoloImg.technologies
    ).reply_markup;
    console.log(aa);
    bot.editMessageReplyMarkup(aa, {
      message_id: idMsgTechnologies - 1,
      chat_id: chatId,
    });
    bot.editMessageText(JSON.stringify(formSoloImg.technologies), {
      message_id: idMsgTechnologies,
      chat_id: chatId,
    });
  }

  if (data == "allTemplate") {
    for (let i = 0; i < templates.length; i++) {
      bot.forwardMessage(myId, groupId, templates[i].idMsg);
    }
  }
  if (data == "clearChat") {
    for (let i = lastMsgId; i > 0; i--) {
      try {
        bot.deleteMessage(chatId, i);
      } catch (e) {}
    }
  }

  if (data == "otherDateLesson") {
    viewCal(new Date().getFullYear(), new Date().getMonth(), chatId);
  }
  if (data.startsWith("cal")) {
    // –ø–æ–ª—É—á–∏–º id —á–∞—Ç–∞
    let chat_id = chatId;

    // –ø–æ–ª—É—á–∏–º callBackQuery_id
    let cbq_id = msg.callback_query_id;
    // –ø–æ–ª—É—á–∏–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–Ω–æ–ø–∫–µ
    let c_data = msg.data;
    // —Å–ø–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è
    let params = c_data.split("_");
    // –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏
    if (params[0] === "cal") {
      // –≤—ã–≤–µ–¥–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
      viewCal(params[1], params[2], chat_id, cbq_id, msg.message.message_id);
    }
    // –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    else if (params[0] === "info") {
      // –≤—ã–≤–µ–¥–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      notice(cbq_id, params[1]);
    } else {
      // –∑–∞–≥–ª—É—à–∏–º –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å
      notice(cbq_id, "This is notice for bot");
    }
  }

  if (data.startsWith("grade-")) {
    formSoloImg.grade = data.slice(6);
    console.log(formSoloImg);

    let idLesson = await drawSolo(
      formSoloImg.name,
      formSoloImg.grade,
      formSoloImg.technologies,
      formSoloImg.date,
      formSoloImg.teacher,
      formSoloImg.themes
    );

    let user = await User.updateOne(
      { idGroup: formSoloImg.idGroup },
      {
        $push: {
          events: {
            id: idLesson,
            date: formSoloImg.date,
            title: "–Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–π —É—Ä–æ–∫",
            grade: formSoloImg.grade,
            technologies: formSoloImg.technologies,
            themes: formSoloImg.themes,
            results: [
              {
                photo: "",
                url: "",
                description: "",
              },
            ],
          },
        },
      }
    );
    let user2 = await User.findOne({ idGroup: "-1001737433387" });

    // console.log(user);
    // console.log(user2);
    let ready = "";

    for (let i = 0; i < formSoloImg.themes.length; i++) {
      if (formSoloImg.themes[i].startsWith("++")) {
        ready += `\n<b><u>${formSoloImg.themes[i]
          .toUpperCase()
          .slice(2)}:</u></b>\n`;
      } else {
        ready += `üöÄ ${formSoloImg.themes[i]}\n`;
      }
    }

    let template = `
<b>üéâ –í–Ü–¢–ê–Æ! –£–†–û–ö –ü–†–û–ô–î–ï–ù–û!</b>

–ó–∞ —Ü–µ–π —É—Ä–æ–∫ —Ç–∏ –æ—Ç—Ä–∏–º—É—î—à: <b>${formSoloImg.grade * 20} üíé</b>

–¢–µ–º–∏, —è–∫—ñ –ø—Ä–æ–π—à–ª–∏ –Ω–∞ –∑–∞–Ω—è—Ç—Ç—ñ:

${ready}

üìö  –ö–æ–¥ –∑ —É—Ä–æ–∫–∞
üìö  –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞—Ç–µ—Ç—ñ–∞–ª–∏
üìö  –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è


<b>–û–¶–Ü–ù–ö–ê:</b>
–ó–∞ –∑–∞–Ω—è—Ç—Ç—è: ${formSoloImg.grade} –ë–ê–õ–Ü–í 
–ó–∞ –¥–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è: 10  –ë–ê–õ–Ü–í 


ID –∑–∞–Ω—è—Ç—Ç—è: 
<code>${idLesson}</code>

<i>–î—ñ–∑–Ω–∞—Ç–∏—Å—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ –ø—Ä–æ —Ç–µ–º–∏ —è–∫—ñ –≤–∏–≤—á–∏–ª–∏ –Ω–∞ —É—Ä–æ—Ü—ñ, —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ –Ω–∏–º –≤–∏ –º–æ–∂–µ—Ç–µ, –æ–±—Ä–∞–≤—à–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá</i>

`;

    let formatPhoto = [];

   
 if (formSoloImg.photos.length >= 1) {
   formSoloImg.photos.forEach((photo) => {
     formatPhoto.push({
       type: "photo",
       media: photo,
       caption: `‚òùÔ∏è –î–µ–∫—ñ–ª—å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π, –Ω–∞ —è–∫–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞—à–æ—ó —Ä–æ–±–æ—Ç–∏ —Ç–∞ –∫–æ–¥ —è–∫–∏–π –º–∏ –≤–∏–≤—á–∞—î–º–æüë®‚Äçüéì`,
     });
   });

   await bot.sendMediaGroup(formSoloImg.idGroup, formatPhoto);
 }

    console.log("----");
    console.log(formSoloImg.themes);
    console.log("----");


    let resThemesBtns = [];
    formSoloImg.themes.forEach((theme) => {
      if (!theme.startsWith("++")) {
        resThemesBtns.push([
          { text: theme, callback_data: "learn-new-" + theme },
        ]);
      }
    });
    let currentThemesKeyboard = {
      reply_markup: {
        inline_keyboard: resThemesBtns,
      },
    };

    addUserMoney(formSoloImg.idGroup, formSoloImg.grade*20);

    await bot.sendPhoto(
      formSoloImg.idGroup,
      "./img/template-grade-individual-lesson20.png",
      { caption: template, parse_mode: "HTML", ...currentThemesKeyboard }
    );

    bot.sendMessage(
      chatId,
      "–ó–∞–ø–∏—Å –ø—Ä–æ –∑–∞–Ω—è—Ç—Ç—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π —É—á–Ω—é"
    );
  }

  if (data.startsWith("learn-new-")) {
    let themeText = data.slice(10);
    let theme;
    for (let i = 0; i < themes[0].data.length; i++) {
      if (themes[0].data[i].details.title === themeText) {
        theme = themes[0].data[i].details;
      }
    }
    let sandbox = "";
    theme.default.sandbox.forEach((item) => {
      sandbox += `<a href="${item.url}">üëâ ${item.title}</a>\n`;
    });
    let links = "";
    theme.links.forEach((item) => {
      links += `<a href="${item.url}">üìë ${item.title}</a>\n`;
    });
    let template1 = `
<b>–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É: ${theme.title}</b>
‚ö°Ô∏è –°–∫–æ—Ä–æ—á–µ–Ω–Ω—è: ${theme.speedCode} 

${theme.description}


<b>üßë‚Äçüíª –ü—Ä–∏–∫–ª–∞–¥ –∫–æ–¥—É:</b>
<code>${theme.default.code[0].body}</code>

<b>üßë‚Äçüíª –ú–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–¥—É:</b>
${sandbox}

<b>üßë‚Äçüíª –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è —Ç–µ–º–∏:</b>
${links}

<b>–°—Ö–æ–∂—ñ –∫–æ–º–∞–Ω–¥–∏, —è–∫—ñ —Å–∫–æ—Ä–æ –º–∞—î–º–æ –≤–∏–≤—á–∏—Ç–∏:</b>
${theme.similarTags}

üìÜ –î–µ–Ω—å, –∫–æ–ª–∏ —Ç–∏ –≤–∏–≤—á–∏–≤ —Ü—é –∫–æ–º–∞–Ω–¥—É: 26.05.2023

`;
    let keyboardThemeTasks = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: `–¢–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è (${theme.tests.length} —à—Ç.)`,
              callback_data: "task-teori-" + theme.title,
            },
          ],
          [
            {
              text: `–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (${theme.tests.length} —à—Ç.)`,
              callback_data: "task-practice-" + theme.title,
            },
          ],
          [
            {
              text: `–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è (${theme.tests.length} —à—Ç.)`,
              callback_data: "task-homework-" + theme.title,
            },
          ],
        ],
      },
    };

    let template2 = `
<b>–û—Ü—ñ–Ω–∫–∏ –ø–æ —Ç–µ–º—ñ ${theme.title}</b>
‚ñ™ –ó–∞ —É—Ä–æ–∫: 11–±.
‚ñ™ –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è: <b>--</b>
‚ñ™ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è: <b>--</b>
‚ñ™ –¢–µ–æ—Ä—ñ—è: <b>--</b>

‚ñ™ 1 –ï–∫–∑–∞–º–µ–Ω: <b>--</b>
<i>–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ 26.07.2023</i>

‚ñ™ 2 –ï–∫–∑–∞–º–µ–Ω: <b>--</b>
<i>–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ 26.09.2023</i>


    `;
    await bot.sendPhoto(chatId, theme.default.images[0].url, {
      caption: template1,
      parse_mode: "HTML",
      disable_web_page_preview: true,
    });
    await bot.sendMessage(chatId, template2, {
      ...keyboardThemeTasks,
      parse_mode: "HTML",
      disable_web_page_preview: true,
    });
  }

  if (data.startsWith("help-50/50-")) {
    let id = data.slice(11); // ec31bbe0
    try {
      bot.editMessageReplyMarkup(
        keyboards.editTest50(msg.message.reply_markup, msg.data, bot, chatId),
        {
          message_id: msg.message.message_id,
          chat_id: chatId,
        }
      );
    } catch (e) {
      console.log(e);
    }
  }
   if (data.startsWith("help-video-")) {
     let id = data.slice(11); // ec31bbe0
     bot.sendMessage(
       chatId,
       "–û—Å—å –≤—ñ–¥–µ–æ –ø–æ —Ü—ñ–π —Ç–µ–º—ñ üëá \n<i>–ü–æ—Ç—Ä—ñ–±–Ω–æ —Ç—Ä—ñ—à–∫–∏ –∑–∞—á–µ–∫–∞—Ç–∏, –≤—ñ–¥–µ–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...<i>", 
       {parse_mode: 'HTML'}
     );
   }

  if (data.startsWith("help-article-")) {
    let id = data.slice(13); // ec31bbe0
    console.log(msg);
    bot.sendMessage(chatId, "hello");
  }

  if (data.startsWith("info")) {
    formSoloImg.date = data.slice(5);
    formSoloImg.technologies = [];
    bot.sendMessage(
      chatId,
      `–î–∞—Ç–∞: ` + data.slice(5) + ` –æ–±—Ä–∞–Ω–∞.`,
      keyboards.confirmTechnology
    );
    bot.sendMessage(
      chatId,
      `–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –∑ —è–∫–∏–º–∏ –ø—Ä–∞—Ü—é–≤–∞–ª–∏ –Ω–∞ —É—Ä–æ—Ü—ñ`,
      keyboards.technologiesKeyboard()
    );

    let msg = await bot.sendMessage(
      chatId,
      JSON.stringify(formSoloImg.technologies)
    );

    idMsgTechnologies = msg.message_id;
  }
});

bot.on("poll_answer", async (msg) => {
  console.log(msg.poll_id);
});

bot.on("web_app_data", async (msg) => {
  let chatId = msg.chat.id;
  console.log(msg);
  bot.sendMessage(chatId, msg.web_app_data.button_text);
  bot.sendMessage(chatId, msg.web_app_data.data);
});

bot.on("photo", async (msg) => {
  let photo = msg.photo[msg.photo.length - 1].file_id;
  let pathToImg = await bot.downloadFile(photo, "./img/students/solo");
  formSoloImg.photos.push("./" + pathToImg);
});




server.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});


export {
  testsID,
  shuffle,
  getNamesStudentByIdGroup,
  getNamesOneStudentByIdGroup,
};
