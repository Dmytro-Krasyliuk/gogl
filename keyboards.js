import { students } from "./data.js";
import ffmpegPath from "ffmpeg-static";
import { technologiesStack, themes, adminId } from "./data.js";
import { User } from "./database/index.js";
import { testsID, shuffle, getNamesOneStudentByIdGroup } from "./app.js";
import { exec } from "child_process";
import path from "path";
import fs from "fs";
import MP4Box from "mp4box";
let namesRight = [];
let namesError = [];

class Keyboards {
  theme = async (currentTheme) => {
    let amountTests = currentTheme.tests.length;
    let amountPractice = currentTheme.tasks.practice.length;
    let amountVideo = 0;
    let totalDurationInSeconds = 0;
    try {
    amountVideo = currentTheme.video.length;
    async function getDurations(videoPaths) {
      const promises = videoPaths.map((videoPath) =>
        getVideoDuration(videoPath)
      );
      return Promise.all(promises);
    }

    const getVideoDuration = (filePath) =>
      new Promise((resolve, reject) => {
        const mp4box = MP4Box.createFile();
        const stream = fs.createReadStream(filePath);
        let fileStart = 0;

        mp4box.onReady = (info) => {
          const duration = info.duration / info.timescale;
          resolve(duration);
        };

        mp4box.onError = (e) => {
          reject(new Error(`MP4Box Error: ${e}`));
        };

        stream.on("data", (buffer) => {
          const arrayBuffer = buffer.buffer.slice(
            buffer.byteOffset,
            buffer.byteOffset + buffer.byteLength
          );
          arrayBuffer.fileStart = fileStart;
          mp4box.appendBuffer(arrayBuffer);
          fileStart += buffer.length;
        });

        stream.on("end", () => {
          mp4box.flush();
        });

        stream.on("error", (error) => {
          reject(error);
        });
      });

    const videoPaths = currentTheme.video.map((v) =>
      path.join(process.cwd(), v.url)
    );

    try {
      const durations = await getDurations(videoPaths);

      totalDurationInSeconds = durations.reduce((acc, curr) => acc + curr, 0);
      console.log(`Total Duration: ${totalDurationInSeconds} seconds`);
    } catch (error) {
      console.error(`Error: ${error}`);
    }
  } catch (e) {

  }

    let currentKeyboard = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: `üìπ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ ${amountVideo} –≤—ñ–¥–µ–æ (${Math.round(
                totalDurationInSeconds / 60
              )} —Ö–≤)`,
              callback_data: "learnTheme-video",
            },
          ],
          [
            {
              text: `‚ùì –¢–µ—Å—Ç–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è (${amountTests} —à—Ç)`,
              callback_data: "learnTheme-tests",
            },
          ],
          [
            {
              text: `üßë‚Äçüíª –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (${amountPractice} —à—Ç)`,
              callback_data: "learnTheme-practice",
            },
          ],
          [{ text: "üîó –°—Ö–æ–∂—ñ —Ç–µ–º–∏", callback_data: "learnTheme-similarTags" }],
        ],
      }),
    };
    return currentKeyboard;
  };

  english = (englishWords) => {
    let currentKeyboard = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: `üá¨üáß –í–∏–≤—á–∏—Ç–∏ —Å–ª–æ–≤–∞ (–≤—Å—å–æ–≥–æ ${englishWords.length} —Å–ª—ñ–≤)`,
              callback_data: "english-learn",
            },
          ],
          [{ text: `üë®‚Äçüéì –¢–µ—Å—Ç–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è`, callback_data: "english-tests" }],
          [{ text: `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`, callback_data: "english-statistics" }],
        ],
      }),
    };
    return currentKeyboard;
  };

  englishNextWord = () => {
    let currentKeyboard = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: `–í–∏–≤—á–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ ‚ñ∂Ô∏è`,
              callback_data: "english-next-word",
            },
          ],
        ],
      }),
    };
    return currentKeyboard;
  };

  nullableEnglishWords() {
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: `‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å`,
              callback_data: "english-nullable-progress",
            },
          ],
        ],
      }),
    };
  }
  confirmEnglishNullable() {
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: `‚ùå –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è`,
              callback_data: "english-nullable-progress-confirm",
            },
          ],
          [
            {
              text: `‚úÖ –ó–∞–ª–∏—à–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å`,
              callback_data: "english-save-progress",
            },
          ],
        ],
      }),
    };
  }

  editTest = (keyboard, answer, bot, chatId) => {
    for (let i = 0; i < keyboard.inline_keyboard.length; i++) {
      let idTest = answer.slice(answer.length - 8);
      console.log("testsID");
      console.log("testsID" + testsID);
      console.log("idTest" + idTest);

      if (answer == keyboard.inline_keyboard[i][0].callback_data) {
        if (answer.startsWith("testAnswer-right-")) {
          testsID.forEach((testID) => {
            if (testID.idQuiz == idTest) {
              if (testID.answers.error.includes(chatId)) {
                console.log("!!222!!");
              }

              testID.answers.right.push(chatId);
              namesRight = [];
              namesError = [];

              testID.answers.right.forEach((id) => {
                namesRight.push(getNamesOneStudentByIdGroup(id));
              });

              testID.answers.error.forEach((id) => {
                namesError.push(getNamesOneStudentByIdGroup(id));
              });

              let templateResult = `
<b>–ü–∏—Ç–∞–Ω–Ω—è:</b>
${testID.title}

<b>–í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:</b>
${testID.options}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:</b>
${testID.rightAnswer}

<b>–í—ñ–¥–ø–æ–≤—ñ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ:</b>
${namesRight}

<b>–í—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:</b>
${namesError}

<b>–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:</b>
-
            `;

              bot.editMessageText(templateResult, {
                parse_mode: "HTML",
                message_id: testID.idMessage,
                chat_id: adminId,
              });
            }
          });

          keyboard.inline_keyboard[i][0] = {
            text: keyboard.inline_keyboard[i][0].text + " ‚úÖ",
            callback_data: `testAnswer-test`,
          };
        }

        if (answer.startsWith("testAnswer-error-")) {
          testsID.forEach((testID) => {
            if (testID.idQuiz == idTest) {
              testID.answers.error.push(chatId);
            }
          });

          testsID.forEach((testID) => {
            if (idTest == testID.idQuiz) {
              console.log(testID.idMessage);
              console.log("chatId: " + chatId);

              namesError.push(getNamesOneStudentByIdGroup(chatId));

              namesError = [];
              namesRight = [];

              testID.answers.right.forEach((id) => {
                namesRight.push(getNamesOneStudentByIdGroup(id));
              });

              testID.answers.error.forEach((id) => {
                namesError.push(getNamesOneStudentByIdGroup(id));
              });

              let templateResult = `
<b>–ü–∏—Ç–∞–Ω–Ω—è:</b>
${testID.title}

<b>–í–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:</b>
${testID.options}

<b>–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:</b>
${testID.rightAnswer}

–í—ñ–¥–ø–æ–≤—ñ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ:
${namesRight}

–í—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:
${namesError}

–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
-
            `;

              bot.editMessageText(templateResult, {
                parse_mode: "HTML",
                message_id: testID.idMessage,
                chat_id: adminId,
              });
            }
          });

          keyboard.inline_keyboard[i][0] = {
            text: keyboard.inline_keyboard[i][0].text + " ‚ùå",
            callback_data: `testAnswer-test`,
          };
        }
      }
    }

    for (let i = 0; i < keyboard.inline_keyboard.length; i++) {
      // console.log(keyboard.inline_keyboard[i][0].callback_data);
      if (answer == keyboard.inline_keyboard[i][0].callback_data) {
        if (answer.startsWith("testAnswer-right-")) {
          keyboard.inline_keyboard[i][0] = {
            text: keyboard.inline_keyboard[i][0].text + " ‚úÖ",
            callback_data: `testAnswer-test`,
          };
        }
        if (answer.startsWith("testAnswer-error-")) {
          keyboard.inline_keyboard[i][0] = {
            text: keyboard.inline_keyboard[i][0].text + " ‚ùå",
            callback_data: `testAnswer-test`,
          };
        }
      }
    }
    console.log(" - - ");
    let newKeyboard = keyboard;

    return newKeyboard;
  };

  editTest50 = (keyboard, answer, bot, chatId) => {
    console.log("444: ", keyboard.inline_keyboard);
    let newKb = [];
    let counterDeleteItems = 0;

    keyboard.inline_keyboard.forEach((item) => {
      if (item[0].callback_data.includes("error") && counterDeleteItems < 2) {
        counterDeleteItems++;
      } else {
        newKb.push(item);
      }
    });

    newKb[newKb.length-1].splice(0, 1)

    return {
      inline_keyboard: newKb,
    };
  };

  createTest = (tasks, id) => {
    let btns = [];
    let rightAnswer = tasks[0];
    let idMessage;
    let newTasks_ = [...tasks];

    let newTasks = shuffle(newTasks_);

    for (let i = 0; i < tasks.length; i++) {
      if (rightAnswer == newTasks[i]) {
        btns.push([
          {
            text: newTasks[i],
            callback_data: `testAnswer-right-${newTasks[i]}-${id}`,
          },
        ]);
      } else {
        btns.push([
          {
            text: newTasks[i],
            callback_data: `testAnswer-error-${newTasks[i]}-${id}`,
          },
        ]);
      }
    }

    btns.push([
      {
        text: "üí´ 50/50",
        callback_data: `help-50/50-${id}`,
      },
      {
        text: "üí´ –°—Ç–∞—Ç—Ç—è",
        callback_data: `help-article-${id}`,
      },
      {
        text: "üí´ –í—ñ–¥–µ–æ",
        callback_data: `help-video-${id}`,
      },
    ]);
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: btns,
      }),
    };
  };

  themesKeyboard(list) {
    // console.log(Object.keys(list));

    let listBtns = [];
    listBtns.push([
      {
        text: "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å",
        callback_data: "themes--" + Object.keys(themes)[0] + "_",
      },
    ]);
    for (let i = 0; i < Object.keys(list).length; i++) {
      listBtns.push([
        {
          text: Object.keys(list)[i],
          callback_data: "themes--" + Object.keys(list)[i] + "_",
        },
      ]);
    }
    // console.log(...listBtns);

    return {
      reply_markup: JSON.stringify({
        inline_keyboard: [...listBtns],
      }),
    };
  }

  gradeKeyboard = () => {
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            { text: "-", callback_data: "grade--" },
            { text: "6", callback_data: "grade-6" },
            { text: "7", callback_data: "grade-7" },
            { text: "8", callback_data: "grade-8" },
          ],
          [
            { text: "9", callback_data: "grade-9" },
            { text: "10", callback_data: "grade-10" },
            { text: "11", callback_data: "grade-11" },
            { text: "12", callback_data: "grade-12" },
          ],
        ],
      }),
    };
  };

  confirmThemes = {
    reply_markup: {
      keyboard: [[{ text: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç–µ–º–∏" }]],
      resize_keyboard: true,
    },
  };

  practiceKeyboard = (idStudent, idTask) => {
    let btns = [];

    btns.push([
      {
        text: "–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
        url: `https://gogl1.onrender.com/get/practice/${idTask}/${idStudent}`,
        callback_data: `practice-${idTask}-${idStudent}`,
      },
    ]);

    return {
      reply_markup: JSON.stringify({
        inline_keyboard: btns,
      }),
    };
  };

  themesDelete = (themes) => {
    let btns = [];
    for (let i = 0; i < themes.length; i++) {
      btns.push([
        {
          text: themes[i],
          callback_data: `deleteThemes-${themes[i]}`,
        },
      ]);
    }
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: btns,
      }),
    };
  };
  mainThemes = (themes, prefix) => {
    let btns = [[]];
    let currentRow = 0;
    let currentRowLength = 0;
    const maxRowLength = 26; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    const maxButtonsPerRow = 4; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É

    for (let i = 0; i < themes.length; i++) {
      const textLength = themes[i].title.length;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä—è–¥–∞ –ø–æ –¥–ª–∏–Ω–µ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–Ω–æ–ø–æ–∫
      if (
        currentRowLength + textLength > maxRowLength ||
        btns[currentRow].length >= maxButtonsPerRow
      ) {
        currentRow++;
        currentRowLength = 0;
        btns.push([]);
      }

      btns[currentRow].push({
        text: themes[i].title,
        callback_data: prefix + `-${i}`,
      });

      currentRowLength += textLength;
    }

    return {
      reply_markup: JSON.stringify({
        inline_keyboard: btns,
      }),
    };
  };

  themesKeyboard2 = (currentThemes, themes) => {
    let btns = [];
    btns.push([
      {
        text: "back",
        callback_data: `themesBack`,
      },
      {
        text: "delete themes",
        callback_data: `themesDelete`,
      },
    ]);
    for (let i = 0; i < currentThemes.length; i++) {
      let sym = "";
      if (themes.includes(currentThemes[i].details.title)) {
        sym = "‚úÖ";
      }
      btns.push([
        {
          text: currentThemes[i].details.title + sym,
          callback_data: `themesIndex-${i}`,
        },
      ]);
    }
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: btns,
      }),
    };
  };

  keyboardDaysWeek = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          { text: "–ü–ù", callback_data: "daysWeek-–ü–æ–Ω–µ–¥—ñ–ª–æ–∫" },
          { text: "–í–¢", callback_data: "daysWeek-–í—ñ–≤—Ç–æ—Ä–æ–∫" },
          { text: "–°–†", callback_data: "daysWeek-–°–µ—Ä–µ–¥–∞" },
        ],
        [
          { text: "–ß–¢", callback_data: "daysWeek-–ß–µ—Ç–≤–µ—Ä" },
          { text: "–ü–¢", callback_data: "daysWeek-–ü'—è—Ç–Ω–∏—Ü—è" },
          { text: "–°–ë", callback_data: "daysWeek-–°—É–±–æ—Ç–∞" },
          { text: "–ù–î", callback_data: "daysWeek-–ù–µ–¥—ñ–ª—è" },
        ],
      ],
    }),
  };

  keyboardSymbols = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          { text: "Tab", callback_data: JSON.stringify({ symbol: "tab" }) },
          { text: "/", callback_data: JSON.stringify({ symbol: "/" }) },
          { text: "'", callback_data: JSON.stringify({ symbol: "'" }) },
          { text: '"', callback_data: JSON.stringify({ symbol: '"' }) },
        ],
        [
          { text: "(", callback_data: JSON.stringify({ symbol: "(" }) },
          { text: ")", callback_data: JSON.stringify({ symbol: ")" }) },
          { text: "[", callback_data: JSON.stringify({ symbol: "[" }) },
          { text: "]", callback_data: JSON.stringify({ symbol: "]" }) },
        ],
        [
          { text: "{", callback_data: JSON.stringify({ symbol: "{" }) },
          { text: "}", callback_data: JSON.stringify({ symbol: "}" }) },
          { text: "<", callback_data: JSON.stringify({ symbol: "<" }) },
          { text: ">", callback_data: JSON.stringify({ symbol: ">" }) },
        ],
        [
          { text: "#", callback_data: JSON.stringify({ symbol: "#" }) },
          { text: "/", callback_data: JSON.stringify({ symbol: "/" }) },
          { text: "|", callback_data: JSON.stringify({ symbol: "|" }) },
          { text: "&", callback_data: JSON.stringify({ symbol: "&" }) },
          { text: "!", callback_data: JSON.stringify({ symbol: "!" }) },
        ],
        [
          { text: "^", callback_data: JSON.stringify({ symbol: "^" }) },
          { text: ":", callback_data: JSON.stringify({ symbol: ":" }) },
          { text: ";", callback_data: JSON.stringify({ symbol: ";" }) },
          { text: "=", callback_data: JSON.stringify({ symbol: "=" }) },
        ],
      ],
    }),
  };

  keyboardTimeWeek = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          { text: "10:00", callback_data: "timeWeek-10:00" },
          { text: "11:00", callback_data: "timeWeek-10:00" },
          { text: "12:00", callback_data: "timeWeek-11:00" },
        ],
        [
          { text: "13:15", callback_data: "timeWeek-13:15" },
          { text: "14:00", callback_data: "timeWeek-14:00" },
          { text: "14:45", callback_data: "timeWeek-14:45" },
        ],
        [
          { text: "15:30", callback_data: "timeWeek-15:30" },
          { text: "16:15", callback_data: "timeWeek-16:15" },
          { text: "17:00", callback_data: "timeWeek-17:00" },
        ],
        [
          { text: "17:45", callback_data: "timeWeek-17:45" },
          { text: "18:30", callback_data: "timeWeek-18:30" },
          { text: "19:15", callback_data: "timeWeek-19:15" },
        ],
        [
          { text: "20:00", callback_data: "timeWeek-20-00" },
          { text: "20:45", callback_data: "timeWeek-20-45" },
          { text: "21:30", callback_data: "timeWeek-21-30" },
          { text: "22:15", callback_data: "timeWeek-22-15" },
        ],
      ],
    }),
  };

  keyboardAdmin = {
    reply_markup: JSON.stringify({
      keyboard: [
        [{ text: "–î–æ–¥–∞—Ç–∏ —É—á–Ω—è" }, { text: "–î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é" }],
        [{ text: "my text3" }],
      ],
    }),
  };

  photoKeyboard = {
    reply_markup: JSON.stringify({
      keyboard: [
        [{ text: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ñ–æ—Ç–æ" }],
        [{ text: "–ë–µ–∑ —Ñ–æ—Ç–æ-–∑–≤—ñ—Ç—É" }],
      ],
      resize_keyboard: true,
    }),
  };

  templateSuccess = (groupId, idMsg) => {
    let linkTemplate = `https://t.me/c/${groupId}/${idMsg}`;
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —à–∞–±–ª–æ–Ω", url: linkTemplate }],
          [
            {
              text: "–í–∏–¥–∞–ª–∏—Ç–∏ —à–∞–±–ª–æ–Ω",
              callback_data: `deleteTemplate-${idMsg}`,
            },
          ],
        ],
      }),
    };
  };

  getMoney = (money) => {
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: `ü§ë –ó–Ω—è—Ç–∏ ${money} –≥—Ä–Ω ü§ë`, callback_data: "getMoney" }],
        ],
      }),
    };
  };

  adminMain = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ text: "üìã –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Ä–æ–∫—É", callback_data: "registeredLesson" }],
        [{ text: "üë• –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥—Ä—É–ø—É", callback_data: "createGroup" }],
        [{ text: "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≥—Ä—É–ø—É", callback_data: "clearGroup" }],
        [{ text: "üíé –ë–∞–ª–∞–Ω—Å–∏ —É—á–Ω—ñ–≤", callback_data: "balanceStudent" }],
        [{ text: "üìù –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–∏", callback_data: "sendTests" }],
        [{ text: "‚úèÔ∏è –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ", callback_data: "sendPractice" }],
        [
          {
            text: "üá¨üáß –£—Å–ø—ñ—Ö–∏ –≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π",
            callback_data: "adminEnglishStat",
          },
        ],
        [
          { text: "üìÑ –®–∞–±–ª–æ–Ω–∏", callback_data: "templates" },
          { text: "üéÆ –ó–º–∞–≥–∞–Ω–Ω—è", callback_data: "quiz" },
        ],
        [
          { text: "üë¶ –£—á–Ω—ñ", callback_data: "students" },
          { text: "üí∞ –û–ø–ª–∞—Ç–∏", callback_data: "pays" },
        ],
        [
          { text: "üóìÔ∏è –†–æ–∑–∫–ª–∞–¥", callback_data: "schedule" },
          { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "statistics" },
        ],
        [{ text: "üë∂ –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —É—á–Ω—è", callback_data: "regStudent" }],
        [{ text: "‚ùå –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç", callback_data: "clearChat" }],
      ],
    }),
  };

  // ‚úÖ‚ùåüü¢üî¥‚ö™Ô∏è

  keyboardTask = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          { text: "10 üíé", callback_data: "user-getCoins" },
          { text: "4 üíé", callback_data: "user-getCoins" },
          { text: "1 üíé", callback_data: "user-getCoins" },
          { text: "5 üíé", callback_data: "user-getCoins" },
        ],
        [
          { text: "‚úÖ", callback_data: "user-getCoins" },
          { text: "5 üíé", callback_data: "user-getCoins" },
          { text: "üîí 7", callback_data: "user-getCoins" },
          { text: "üîí 30", callback_data: "user-getCoins" },
        ],
        [
          { text: "üîí 1", callback_data: "user-getCoins" },
          { text: "‚úÖ", callback_data: "user-getCoins" },
          { text: "üîí 15", callback_data: "user-getCoins" },
          { text: "üîí 5", callback_data: "user-getCoins" },
        ],
        [
          { text: "üîí 10", callback_data: "user-getCoins" },
          { text: "‚úÖ", callback_data: "user-getCoins" },
          { text: "üîí 40", callback_data: "user-getCoins" },
          { text: "üîí 60", callback_data: "user-getCoins" },
        ],
      ],
    }),
  };

  keyboardStudentsSettings = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          {
            text: "üì∏ –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é",
            callback_data: "user-settings-ava",
          },
        ],
      ],
    }),
  };

  keyboardStudents = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ text: "üíé –ó–∞—Ä–æ–±–∏—Ç–∏ –º–æ–Ω–µ—Ç–∏", callback_data: "user-getCoins" }],
        [
          { text: "üöò –ó–º—ñ–Ω–∏—Ç–∏ –∞–≤—Ç–æ", callback_data: "user-changeCar" },
          { text: "üè¶ –ú—ñ–π –±–∞–ª–∞–Ω—Å", callback_data: "user-balance" },
        ],
        [
          { text: "üëë –ú–æ—ó —É—Å–ø—ñ—Ö–∏", callback_data: "user-successes" },
          { text: "ü•á –ú–æ—ó –æ—Ü—ñ–Ω–∫–∏", callback_data: "user-myGrade" },
        ],
        [
          { text: "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "user-statistics" },
          { text: "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data: "user-settings" },
        ],
        [{ text: "üéì –í–∏–≤—á–∏—Ç–∏ –Ω–æ–≤—É —Ç–µ–º—É", callback_data: "user-newTheme" }],
        [{ text: "üá∫üá∏ –í–∏–≤—á–∏—Ç–∏ IT –ê–Ω–≥–ª—ñ–π—Å—å–∫—É", callback_data: "user-english" }],
        [{ text: "üìù –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è", callback_data: "user-getTasks" }],
        [{ text: "üóÇ –ó–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data: "user-savedWork" }],
        [{ text: "üîç –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ Chat GPT", callback_data: "user-gpt" }],
        [{ text: "üìÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥", callback_data: "user-schedule" }],
        [
          {
            text: "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å",
            callback_data: "user-changeSchedule",
          },
        ],

        [
          {
            text: "üí∞ –ó–º–∞–≥–∞–Ω–Ω—è —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤",
            callback_data: "user-competitions",
          },
        ],
        [{ text: "üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞ –Ω–∞–≤—á–∞–Ω–Ω—è", callback_data: "user-pay" }],
        [{ text: "üìï –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–ª–∞–Ω –Ω–∞–≤—á–∞–Ω–Ω—è", callback_data: "user-program" }],
      ],
    }),
  };

  templatesKeyboard = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ text: "–£—Å—ñ —à–∞–±–ª–æ–Ω–∏", callback_data: "allTemplate" }],
        [{ text: "–°—Ç–≤–æ—Ä–∏—Ç–∏ —à–∞–±–ª–æ–Ω", callback_data: "createTemplate" }],
      ],
    }),
  };

  code = (id, element, allAmount = 0, index = 1, file = "index.html") => {
    const files = ["index.html", "style.css", "script.js"];

    const buttons = files.map((f) => ({
      text: `${f === file ? "‚úÖ" : "‚¨úÔ∏è"} ${f}`,
      callback_data: `code//${f
        .toUpperCase()
        .split(".")
        .shift()}//${element}//${id}`,
    }));

    return {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          buttons,
          [
            {
              text: "üìπ –í—ñ–¥–µ–æ",
              callback_data: "code//VIDEO//" + element + "//" + id,
            },
            {
              text: "üß™ –ü—ñ—Å–æ—á–Ω–∏—Ü—è",
              url: "https://google.com/" + element + "//" + id,
            },
          ],
          [
            {
              text: "‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π",
              callback_data: "code//PREV//" + element + "//" + id,
            },
            {
              text: `${index} / ${allAmount}`,
              callback_data: "code//INDEX//" + element + "//" + id,
            },
            {
              text: "‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π",
              callback_data: "code//NEXT//" + element + "//" + id,
            },
          ],
        ],
      }),
    };
  };
  elementsCategory = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          {
            text: "‚ñ∂Ô∏è –ö–Ω–æ–ø–∫–∏",
            callback_data: "elements-button",
          },
          {
            text: "üñº –§–æ—Ç–æ",
            callback_data: "elements-photo",
          },
          {
            text: "üìù –¢–µ–∫—Å—Ç–∏",
            callback_data: "elements-text",
          },
        ],
        [
          {
            text: "üí¨ –ó–∞–≥–æ–ª–æ–≤–æ–∫–∏",
            callback_data: "elements-headings",
          },
          {
            text: "üî£ –Ü–∫–æ–Ω–∫–∏",
            callback_data: "elements-icons",
          },
          {
            text: "üé® –§–æ–Ω",
            callback_data: "elements-background",
          },
        ],
        [
          {
            text: "üñºÔ∏è –ì–∞–ª–µ—Ä–µ—ó",
            callback_data: "elements-gallery",
          },
          {
            text: "üìú –ú–µ–Ω—é",
            callback_data: "elements-menu",
          },
          {
            text: "üö© –ë–∞–Ω–µ—Ä–∞",
            callback_data: "elements-banners",
          },
        ],
        [
          {
            text: "üÉè –ö–∞—Ä—Ç–∫–∏",
            callback_data: "elements-cards",
          },
          {
            text: "üí° –¢—É–ª—Ç—ñ–ø–∏",
            callback_data: "elements-tooltips",
          },
          {
            text: "üìä –ü—Ä–æ–≥—Ä–µ—Å –±–∞—Ä–∏",
            callback_data: "elements-progressbars",
          },
        ],
        [
          {
            text: "üìã –§–æ—Ä–º–∏",
            callback_data: "elements-forms",
          },
          {
            text: "üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è",
            callback_data: "elements-links",
          },
          {
            text: "üìä –¢–∞–±–ª–∏—Ü—ñ",
            callback_data: "elements-tables",
          },
        ],
        [
          {
            text: "üìù –°–ø–∏—Å–∫–∏",
            callback_data: "elements-lists",
          },
          {
            text: "üîñ –í–∫–ª–∞–¥–∫–∏",
            callback_data: "elements-tabs",
          },
          {
            text: "üéµ –ê–∫–æ—Ä–¥–µ–æ–Ω–∏",
            callback_data: "elements-accordions",
          },
        ],
        [
          {
            text: "üéûÔ∏è –°–ª–∞–π–¥–µ—Ä–∏",
            callback_data: "elements-sliders",
          },
          {
            text: "üî¢ –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è",
            callback_data: "elements-pagination",
          },
          {
            text: "üîç –ü–æ—à—É–∫–æ–≤—ñ —Å—Ç—Ä–æ–∫–∏",
            callback_data: "elements-searchbars",
          },
        ],
        [
          {
            text: "üéµ –ü–ª–µ—î—Ä–∏ (—Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ)",
            callback_data: "elements-players",
          },
          {
            text: "üí¨ –ß–∞—Ç–∏, —Ñ–æ—Ä—É–º–∏",
            callback_data: "elements-chats-forums",
          },
        ],
        [
          {
            text: "üìä –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è",
            callback_data: "elements-polls",
          },
          {
            text: "üé≠ –ê–Ω—ñ–º–∞—Ü—ñ—ó",
            callback_data: "elements-animations",
          },
          {
            text: "üóØÔ∏è –ü–æ–ø –∞–ø–∏",
            callback_data: "elements-popups",
          },
        ],
        [
          {
            text: "üó∫ –ö–∞—Ä—Ç–∏",
            callback_data: "elements-maps",
          },
          {
            text: "üó®Ô∏è –¶–∏—Ç–∞—Ç–∏",
            callback_data: "elements-quotes",
          },
          {
            text: "üÜî –õ–æ–≥–æ—Ç–∏–ø–∏",
            callback_data: "elements-logos",
          },
        ],
        [
          {
            text: "üë§ –ê–≤–∞—Ç–∞—Ä–∏",
            callback_data: "elements-avatars",
          },
          {
            text: "ü•ñ –•–ª—ñ–±–Ω—ñ –∫—Ä–∏—Ö—Ç–∏",
            callback_data: "elements-breadcrumbs",
          },
          {
            text: "üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä",
            callback_data: "elements-calendar",
          },
        ],
        [
          {
            text: "üîç –§—ñ–ª—å—Ç—Ä–∏",
            callback_data: "elements-filters",
          },
          {
            text: "üîÑ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è",
            callback_data: "elements-sorting",
          },
          {
            text: "üéõÔ∏è –í—ñ–¥–∂–µ—Ç–∏",
            callback_data: "elements-widgets",
          },
        ],
        [
          {
            text: "üõí –ö–æ—Ä–∑–∏–Ω–∞",
            callback_data: "elements-cart",
          },
          {
            text: "üîç –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤",
            callback_data: "elements-compare",
          },
        ],
        [
          {
            text: "üëç –ö–Ω–æ–ø–∫–∏ –Ω–∞ —Å–æ—Ü –º–µ—Ä–µ–∂—ñ",
            callback_data: "elements-social-buttons",
          },
          {
            text: "‚ù§Ô∏è –ö–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞",
            callback_data: "elements-like-buttons",
          },
          {
            text: "üçî –ì–∞–º–±—É—Ä–≥–µ—Ä –º–µ–Ω—é",
            callback_data: "elements-hamburger-menu",
          },
        ],
        [
          {
            text: "üíÄ –°–∫–µ–ª–µ—Ç–æ–Ω–∏",
            callback_data: "elements-skeletons",
          },
          {
            text: "‚è≥ –ü—Ä–µ–ª–æ–∞–¥–µ—Ä–∏",
            callback_data: "elements-preloaders",
          },
          {
            text: "‚¨ÜÔ∏è –ö–Ω–æ–ø–∫–∞ –Ω–∞–≥–æ—Ä—É",
            callback_data: "elements-scroll-up",
          },
        ],
      ],
    }),
  };

  elementsCaregory = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          {
            text: "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤",
            callback_data: "registeredQuizStudents",
          },
        ],
      ],
    }),
  };

  registeredQuiz = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          {
            text: "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤",
            callback_data: "registeredQuizStudents",
          },
        ],
      ],
    }),
  };
  keyboardIsNextDay = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          {
            text: "–¢–∞–∫",
            callback_data: "nextDayTrue",
          },
          {
            text: "–ù—ñ",
            callback_data: "nextDayFalse",
          },
        ],
      ],
    }),
  };

  confirmNewGroup = {
    reply_markup: {
      keyboard: [
        [
          {
            text: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É–ø—É",
          },
        ],
      ],
      resize_keyboard: true,
    },
  };

  confirmSave = {
    reply_markup: {
      keyboard: [
        [
          {
            text: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —à–∞–±–ª–æ–Ω",
            web_app: { url: "https://dmytro-krasyliuk.github.io/bott/" },
          },
        ],
      ],
      resize_keyboard: true,
    },
  };

  confirmTechnology = {
    reply_markup: {
      keyboard: [["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó"]],
      resize_keyboard: true,
      one_time_keyboard: true,
      force_reply: true,
    },
  };

  confirmDate = (date) => {
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: date, callback_data: "info-" + date }],
          [{ text: "–Ü–Ω—à–∞ –¥–∞—Ç–∞", callback_data: "otherDateLesson" }],
        ],
      }),
    };
  };
  statPeriod = (id) => {
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "üìä –°—å–æ–≥–æ–¥–Ω—ñ",
              callback_data: JSON.stringify({
                d: "stat",
                id: id,
                p: "today",
              }),
            },
            {
              text: "üìä –í—á–æ—Ä–∞",
              callback_data: JSON.stringify({
                d: "stat",
                id: id,
                p: "today",
              }),
            },
          ],
          [
            {
              text: "üìä –¶–µ–π —Ç–∏–∂–¥–µ–Ω—å",
              callback_data: JSON.stringify({
                d: "stat",
                id: id,
                p: "today",
              }),
            },
          ],
          [
            {
              text: "üìä –ú–∏–Ω—É–ª–∏–π —Ç–∏–∂–¥–µ–Ω—å",
              callback_data: JSON.stringify({
                d: "stat",
                id: id,
                p: "today",
              }),
            },
          ],
          [
            {
              text: "üìä –ú—ñ—Å—è—Ü—å",
              callback_data: JSON.stringify({
                d: "stat",
                id: id,
                p: "today",
              }),
            },
          ],
          [
            {
              text: "üìà –í–µ—Å—å –ø–µ—Ä—ñ–æ–¥",
              callback_data: JSON.stringify({
                d: "stat",
                id: id,
                p: "today",
              }),
            },
          ],
        ],
      }),
    };
  };

  openApp = () => {
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "open",
              web_app: { url: "https://dmytro-krasyliuk.github.io/bott/" },
            },
          ],
        ],
      }),
    };
  };

  adminManageBalance = (id) => {
    console.log(id);
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "‚ûï –î–æ–¥–∞—Ç–∏",
              callback_data: JSON.stringify({
                data: "manageBalance",
                type: "+",
                id: id,
              }),
            },
            {
              text: "‚ûñ –í—ñ–¥–Ω—è—Ç–∏",
              callback_data: JSON.stringify({
                data: "manageBalance",
                type: "-",
                id: id,
              }),
            },
          ],
        ],
      }),
    };
  };
  balanceManageNumber = (operation, id) => {
    console.log("operation", operation);
    console.log("id", id);
    let kb = []; // kb –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫
    let currentNumber = 10; // –Ω–∞—á–∏–Ω–∞–µ–º —Å 5

    for (let i = 0; i < 30; i++) {
      let kbRow = [];
      for (let j = 0; j < 5; j++) {
        kbRow.push({
          text: currentNumber + " üíé",
          callback_data: JSON.stringify({
            d: "cb",
            t: operation,
            m: currentNumber,
            i: id,
          }),
        });
        currentNumber += 10;
      }
      kb.push(kbRow);
    }
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: kb,
      }),
    };
  };
  changeUserSchedule(bookedTimes, listDay = ["–ü–ù", "–í–¢"]) {
    const flatBookedTimes = bookedTimes.flat();
    console.log(bookedTimes);
    // –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    const allDaysShort = ["–ß–∞—Å"];
    allDaysShort.push(...listDay);
    const fullDayMap = {
      –ü–æ–Ω–µ–¥—ñ–ª–æ–∫: "–ü–ù",
      –í—ñ–≤—Ç–æ—Ä–æ–∫: "–í–¢",
      –°–µ—Ä–µ–¥–∞: "–°–†",
      –ß–µ—Ç–≤–µ—Ä: "–ß–¢",
      –ü—è—Ç–Ω–∏—Ü—è: "–ü–¢",
      –°—É–±–æ—Ç–∞: "–°–ë",
      –ù–µ–¥—ñ–ª—è: "–ù–î",
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è dayMap, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –¥–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ listDay
    const dayMap = Object.fromEntries(
      Object.entries(fullDayMap).filter(([fullDay, shortDay]) =>
        listDay.includes(shortDay)
      )
    );

    const allTimes = [
      "10:00",
      "11:00",
      "12:00",
      "13:00",
      "14:00",
      "14:45",
      "15:30",
      "16:15",
      "17:00",
      "17:45",
      "18:30",
      "19:15",
      "20:00",
      "20:45",
      "21:30",
      "22:15",
    ];

    const inlineKeyboard = [];
    inlineKeyboard.push(
      allDaysShort.map((day) => ({ text: day, callback_data: day }))
    );

    allTimes.forEach((time) => {
      const row = [];
      row.push({ text: time, callback_data: `time_${time}` });

      Object.keys(dayMap).forEach((fullDay) => {
        const shortDay = dayMap[fullDay];
        const isBooked = flatBookedTimes.some(
          (booking) => booking.day === fullDay && booking.time === time
        );
        let sym = isBooked ? "üî¥" : "‚ö™Ô∏è";
        row.push({
          text: sym,
          callback_data: `showDate_${sym}_${shortDay}_${time}`,
        });
      });

      inlineKeyboard.push(row);
    });

    inlineKeyboard.push([
      {
        text:
          listDay.includes("–ü–ù") && listDay.includes("–í–¢")
            ? "‚úÖ –ü–ù-–í–¢"
            : "‚¨úÔ∏è –ü–ù-–í–¢",
        callback_data: JSON.stringify({
          d: "ScheduleDay",
          days: ["–ü–ù", "–í–¢"],
        }),
      },
      {
        text:
          listDay.includes("–°–†") && listDay.includes("–ß–¢")
            ? "‚úÖ –°–†-–ß–¢"
            : "‚¨úÔ∏è –°–†-–ß–¢",
        callback_data: JSON.stringify({
          d: "ScheduleDay",
          days: ["–°–†", "–ß–¢"],
        }),
      },
      {
        text: listDay.some((day) => ["–ü–¢", "–°–ë", "–ù–î"].includes(day))
          ? "‚úÖ –ü–¢-–ù–î"
          : "‚¨úÔ∏è –ü–¢-–ù–î",
        callback_data: JSON.stringify({
          d: "ScheduleDay",
          days: ["–ü–¢", "–°–ë", "–ù–î"],
        }),
      },
    ]);

    return {
      reply_markup: {
        inline_keyboard: inlineKeyboard,
      },
    };
  }

  studentChange(id) {
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [
            {
              text: "‚ÑπÔ∏è –í—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
              callback_data: JSON.stringify({
                d: "studentInfo",
                id: id,
              }),
            },
          ],

          [
            {
              text: "üóì –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –∑–∞–Ω—è—Ç—å",
              callback_data: JSON.stringify({
                d: "studentSchedule",
                id: id,
              }),
            },
          ],

          [
            {
              text: "‚è∏ –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è",
              callback_data: JSON.stringify({
                d: "studentPause",
                id: id,
              }),
            },
          ],
          [
            {
              text: "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —É—á–Ω—è",
              callback_data: JSON.stringify({
                d: "studentDelete",
                id: id,
              }),
            },
          ],
        ],
      }),
    };
  }

  // –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —É—Å—ñ—Ö —É—á–Ω—ñ–≤
  chooseStudents = async (type) => {
    let prefix = "infoStudent-/-";
    let dataStudentsBtns = [];
    let students1 = await User.find({});
    console.log(students1);
    if (type === "createGroup") {
      prefix = "newGroupStudent-/-";
    }
    if (type == "showStudent") {
      prefix = "showStudent-/-";
    }
    if (type == "balance") {
      prefix = "balance-/-";

      try {
        let students = await User.find({});
        console.log(students);
        for (let i = 0; i < students.length; i++) {
          console.log("get data balance");
          console.log(students[i]);
          dataStudentsBtns.push([
            {
              text:
                students[i].name +
                " " +
                students[i].lastName +
                ` (üíé ${students[i].diamonds})`,
              callback_data:
                prefix +
                students[i].name +
                " " +
                students[i].lastName +
                "-/-" +
                students[i].idGroup,
            },
          ]);
        }
      } catch (e) {
        console.log(e);
      }
    } else if (type == "newLesson") {
      prefix = "newLesson-/-";

      try {
        let students = await User.find({});
        console.log(students);

        let currentRow = []; // –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä—è–¥–∞

        for (let i = 0; i < students.length; i++) {
          console.log("-- -- --");
          console.log(students[i]);

          let btn = {
            text: students[i].name + " " + students[i].lastName,
            callback_data:
              prefix +
              students[i].name +
              " " +
              students[i].lastName +
              "-/-" +
              students[i].idGroup,
          };

          currentRow.push(btn); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â–∏–π —Ä—è–¥

          // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä—è–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç 3 –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –º—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å—Ç—É–¥–µ–Ω—Ç–µ
          if ((i + 1) % 3 == 0 || i == students.length - 1) {
            dataStudentsBtns.push(currentRow);
            currentRow = []; // –û–±–Ω—É–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä—è–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫
          }
        }
      } catch (e) {
        console.log(e);
      }
    } else {
      try {
        for (let i = 0; i < students.length; i += 3) {
          let btns = [];
          for (let j = i; j < i + 3; j++) {
            if (students[j]) {
              btns.push({
                text: students[j].name + " " + students[j].lastName,
                callback_data: prefix + students[j].idGroup,
              });
            }
          }
          dataStudentsBtns.push(btns);
        }
      } catch (e) {}
    }

    dataStudentsBtns.push([
      {
        text: "–û–±—Ä–∞—Ç–∏ –≤—Å—ñ—Ö —É—á–Ω—ñ–≤",
        callback_data: "chooseAllStudent",
      },
    ]);

    return {
      reply_markup: JSON.stringify({
        inline_keyboard: dataStudentsBtns,
      }),
    };
  };

  showQuiz() {
    return {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è", callback_data: "loadAnswer" }],
        ],
      }),
    };
  }

  technologiesKeyboard(newTechnologyList = []) {
    let technologiesBtnsList = [];

    for (let i = 0; i < technologiesStack.length; i++) {
      let sym = "";
      if (newTechnologyList.includes(technologiesStack[i])) {
        sym = " ‚úÖ";
      }
      technologiesBtnsList.push([
        {
          text: technologiesStack[i] + sym,
          callback_data: "selectTechnologies-" + technologiesStack[i],
        },
      ]);
    }

    return {
      reply_markup: JSON.stringify({
        inline_keyboard: technologiesBtnsList,
      }),
    };
  }
}

export { Keyboards };
